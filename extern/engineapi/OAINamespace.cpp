/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 23.02.18
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamespace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamespace::OAINamespace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamespace::OAINamespace() {
    this->initializeModel();
}

OAINamespace::~OAINamespace() {}

void OAINamespace::initializeModel() {

    m_disk_quota_isSet = false;
    m_disk_quota_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;
}

void OAINamespace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINamespace::fromJsonObject(QJsonObject json) {

    m_disk_quota_isValid = ::OpenAPI::fromJsonValue(disk_quota, json[QString("disk_quota")]);
    m_disk_quota_isSet = !json[QString("disk_quota")].isNull() && m_disk_quota_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;
}

QString OAINamespace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINamespace::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_quota_isSet) {
        obj.insert(QString("disk_quota"), ::OpenAPI::toJsonValue(disk_quota));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(permissions));
    }
    return obj;
}

qint32 OAINamespace::getDiskQuota() const {
    return disk_quota;
}
void OAINamespace::setDiskQuota(const qint32 &disk_quota) {
    this->disk_quota = disk_quota;
    this->m_disk_quota_isSet = true;
}

bool OAINamespace::is_disk_quota_Set() const{
    return m_disk_quota_isSet;
}

bool OAINamespace::is_disk_quota_Valid() const{
    return m_disk_quota_isValid;
}

QString OAINamespace::getName() const {
    return name;
}
void OAINamespace::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAINamespace::is_name_Set() const{
    return m_name_isSet;
}

bool OAINamespace::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPerm_and_username> OAINamespace::getPermissions() const {
    return permissions;
}
void OAINamespace::setPermissions(const QList<OAIPerm_and_username> &permissions) {
    this->permissions = permissions;
    this->m_permissions_isSet = true;
}

bool OAINamespace::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAINamespace::is_permissions_Valid() const{
    return m_permissions_isValid;
}

bool OAINamespace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINamespace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
