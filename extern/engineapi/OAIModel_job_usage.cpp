/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModel_job_usage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModel_job_usage::OAIModel_job_usage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModel_job_usage::OAIModel_job_usage() {
    this->initializeModel();
}

OAIModel_job_usage::~OAIModel_job_usage() {}

void OAIModel_job_usage::initializeModel() {

    m_finished_isSet = false;
    m_finished_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_process_status_isSet = false;
    m_process_status_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_submitted_isSet = false;
    m_submitted_isValid = false;

    m_times_isSet = false;
    m_times_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIModel_job_usage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModel_job_usage::fromJsonObject(QJsonObject json) {

    m_finished_isValid = ::OpenAPI::fromJsonValue(finished, json[QString("finished")]);
    m_finished_isSet = !json[QString("finished")].isNull() && m_finished_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_process_status_isValid = ::OpenAPI::fromJsonValue(process_status, json[QString("process_status")]);
    m_process_status_isSet = !json[QString("process_status")].isNull() && m_process_status_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_submitted_isValid = ::OpenAPI::fromJsonValue(submitted, json[QString("submitted")]);
    m_submitted_isSet = !json[QString("submitted")].isNull() && m_submitted_isValid;

    m_times_isValid = ::OpenAPI::fromJsonValue(times, json[QString("times")]);
    m_times_isSet = !json[QString("times")].isNull() && m_times_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIModel_job_usage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModel_job_usage::asJsonObject() const {
    QJsonObject obj;
    if (m_finished_isSet) {
        obj.insert(QString("finished"), ::OpenAPI::toJsonValue(finished));
    }
    if (labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(labels));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(model));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(r_namespace));
    }
    if (m_process_status_isSet) {
        obj.insert(QString("process_status"), ::OpenAPI::toJsonValue(process_status));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (m_submitted_isSet) {
        obj.insert(QString("submitted"), ::OpenAPI::toJsonValue(submitted));
    }
    if (times.size() > 0) {
        obj.insert(QString("times"), ::OpenAPI::toJsonValue(times));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(token));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(username));
    }
    return obj;
}

QDateTime OAIModel_job_usage::getFinished() const {
    return finished;
}
void OAIModel_job_usage::setFinished(const QDateTime &finished) {
    this->finished = finished;
    this->m_finished_isSet = true;
}

bool OAIModel_job_usage::is_finished_Set() const{
    return m_finished_isSet;
}

bool OAIModel_job_usage::is_finished_Valid() const{
    return m_finished_isValid;
}

QList<QString> OAIModel_job_usage::getLabels() const {
    return labels;
}
void OAIModel_job_usage::setLabels(const QList<QString> &labels) {
    this->labels = labels;
    this->m_labels_isSet = true;
}

bool OAIModel_job_usage::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIModel_job_usage::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIModel_job_usage::getModel() const {
    return model;
}
void OAIModel_job_usage::setModel(const QString &model) {
    this->model = model;
    this->m_model_isSet = true;
}

bool OAIModel_job_usage::is_model_Set() const{
    return m_model_isSet;
}

bool OAIModel_job_usage::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIModel_job_usage::getRNamespace() const {
    return r_namespace;
}
void OAIModel_job_usage::setRNamespace(const QString &r_namespace) {
    this->r_namespace = r_namespace;
    this->m_r_namespace_isSet = true;
}

bool OAIModel_job_usage::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIModel_job_usage::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

qint32 OAIModel_job_usage::getProcessStatus() const {
    return process_status;
}
void OAIModel_job_usage::setProcessStatus(const qint32 &process_status) {
    this->process_status = process_status;
    this->m_process_status_isSet = true;
}

bool OAIModel_job_usage::is_process_status_Set() const{
    return m_process_status_isSet;
}

bool OAIModel_job_usage::is_process_status_Valid() const{
    return m_process_status_isValid;
}

qint32 OAIModel_job_usage::getStatus() const {
    return status;
}
void OAIModel_job_usage::setStatus(const qint32 &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool OAIModel_job_usage::is_status_Set() const{
    return m_status_isSet;
}

bool OAIModel_job_usage::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIModel_job_usage::getSubmitted() const {
    return submitted;
}
void OAIModel_job_usage::setSubmitted(const QDateTime &submitted) {
    this->submitted = submitted;
    this->m_submitted_isSet = true;
}

bool OAIModel_job_usage::is_submitted_Set() const{
    return m_submitted_isSet;
}

bool OAIModel_job_usage::is_submitted_Valid() const{
    return m_submitted_isValid;
}

QList<OAITime_span> OAIModel_job_usage::getTimes() const {
    return times;
}
void OAIModel_job_usage::setTimes(const QList<OAITime_span> &times) {
    this->times = times;
    this->m_times_isSet = true;
}

bool OAIModel_job_usage::is_times_Set() const{
    return m_times_isSet;
}

bool OAIModel_job_usage::is_times_Valid() const{
    return m_times_isValid;
}

QString OAIModel_job_usage::getToken() const {
    return token;
}
void OAIModel_job_usage::setToken(const QString &token) {
    this->token = token;
    this->m_token_isSet = true;
}

bool OAIModel_job_usage::is_token_Set() const{
    return m_token_isSet;
}

bool OAIModel_job_usage::is_token_Valid() const{
    return m_token_isValid;
}

QString OAIModel_job_usage::getUsername() const {
    return username;
}
void OAIModel_job_usage::setUsername(const QString &username) {
    this->username = username;
    this->m_username_isSet = true;
}

bool OAIModel_job_usage::is_username_Set() const{
    return m_username_isSet;
}

bool OAIModel_job_usage::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIModel_job_usage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_finished_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_process_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (times.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModel_job_usage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
