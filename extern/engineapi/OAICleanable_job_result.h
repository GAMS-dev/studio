/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICleanable_job_result.h
 *
 * 
 */

#ifndef OAICleanable_job_result_H
#define OAICleanable_job_result_H

#include <QJsonObject>

#include "OAIModel_user.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIModel_user;

class OAICleanable_job_result : public OAIObject {
public:
    OAICleanable_job_result();
    OAICleanable_job_result(QString json);
    ~OAICleanable_job_result() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFilename() const;
    void setFilename(const QString &filename);
    bool is_filename_Set() const;
    bool is_filename_Valid() const;

    qint32 getLength() const;
    void setLength(const qint32 &length);
    bool is_length_Set() const;
    bool is_length_Valid() const;

    QString getRNamespace() const;
    void setRNamespace(const QString &r_namespace);
    bool is_r_namespace_Set() const;
    bool is_r_namespace_Valid() const;

    QString getToken() const;
    void setToken(const QString &token);
    bool is_token_Set() const;
    bool is_token_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QDateTime getUploadDate() const;
    void setUploadDate(const QDateTime &upload_date);
    bool is_upload_date_Set() const;
    bool is_upload_date_Valid() const;

    OAIModel_user getUser() const;
    void setUser(const OAIModel_user &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString filename;
    bool m_filename_isSet;
    bool m_filename_isValid;

    qint32 length;
    bool m_length_isSet;
    bool m_length_isValid;

    QString r_namespace;
    bool m_r_namespace_isSet;
    bool m_r_namespace_isValid;

    QString token;
    bool m_token_isSet;
    bool m_token_isValid;

    QString type;
    bool m_type_isSet;
    bool m_type_isValid;

    QDateTime upload_date;
    bool m_upload_date_isSet;
    bool m_upload_date_isValid;

    OAIModel_user user;
    bool m_user_isSet;
    bool m_user_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICleanable_job_result)

#endif // OAICleanable_job_result_H
