/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhook_parameterized_event.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhook_parameterized_event::OAIWebhook_parameterized_event(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhook_parameterized_event::OAIWebhook_parameterized_event() {
    this->initializeModel();
}

OAIWebhook_parameterized_event::~OAIWebhook_parameterized_event() {}

void OAIWebhook_parameterized_event::initializeModel() {

    m_event_isSet = false;
    m_event_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;
}

void OAIWebhook_parameterized_event::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhook_parameterized_event::fromJsonObject(QJsonObject json) {

    m_event_isValid = ::OpenAPI::fromJsonValue(event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;
}

QString OAIWebhook_parameterized_event::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhook_parameterized_event::asJsonObject() const {
    QJsonObject obj;
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(event));
    }
    if (parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(parameters));
    }
    return obj;
}

QString OAIWebhook_parameterized_event::getEvent() const {
    return event;
}
void OAIWebhook_parameterized_event::setEvent(const QString &event) {
    this->event = event;
    this->m_event_isSet = true;
}

bool OAIWebhook_parameterized_event::is_event_Set() const{
    return m_event_isSet;
}

bool OAIWebhook_parameterized_event::is_event_Valid() const{
    return m_event_isValid;
}

QList<QString> OAIWebhook_parameterized_event::getParameters() const {
    return parameters;
}
void OAIWebhook_parameterized_event::setParameters(const QList<QString> &parameters) {
    this->parameters = parameters;
    this->m_parameters_isSet = true;
}

bool OAIWebhook_parameterized_event::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIWebhook_parameterized_event::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAIWebhook_parameterized_event::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhook_parameterized_event::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
