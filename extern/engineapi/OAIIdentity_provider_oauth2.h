/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 23.06.02
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIdentity_provider_oauth2.h
 *
 * 
 */

#ifndef OAIIdentity_provider_oauth2_H
#define OAIIdentity_provider_oauth2_H

#include <QJsonObject>

#include "OAIIdentity_provider_oauth2_scope.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIIdentity_provider_oauth2 : public OAIObject {
public:
    OAIIdentity_provider_oauth2();
    OAIIdentity_provider_oauth2(QString json);
    ~OAIIdentity_provider_oauth2() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAuthorizationEndpoint() const;
    void setAuthorizationEndpoint(const QString &authorization_endpoint);
    bool is_authorization_endpoint_Set() const;
    bool is_authorization_endpoint_Valid() const;

    QString getDeviceAuthorizationEndpoint() const;
    void setDeviceAuthorizationEndpoint(const QString &device_authorization_endpoint);
    bool is_device_authorization_endpoint_Set() const;
    bool is_device_authorization_endpoint_Valid() const;

    QString getDeviceClientId() const;
    void setDeviceClientId(const QString &device_client_id);
    bool is_device_client_id_Set() const;
    bool is_device_client_id_Valid() const;

    QString getEndSessionEndpoint() const;
    void setEndSessionEndpoint(const QString &end_session_endpoint);
    bool is_end_session_endpoint_Set() const;
    bool is_end_session_endpoint_Valid() const;

    QList<QString> getGrantTypesSupported() const;
    void setGrantTypesSupported(const QList<QString> &grant_types_supported);
    bool is_grant_types_supported_Set() const;
    bool is_grant_types_supported_Valid() const;

    bool isHasWebUiClientSecret() const;
    void setHasWebUiClientSecret(const bool &has_web_ui_client_secret);
    bool is_has_web_ui_client_secret_Set() const;
    bool is_has_web_ui_client_secret_Valid() const;

    QString getIssuer() const;
    void setIssuer(const QString &issuer);
    bool is_issuer_Set() const;
    bool is_issuer_Valid() const;

    QString getJwksUri() const;
    void setJwksUri(const QString &jwks_uri);
    bool is_jwks_uri_Set() const;
    bool is_jwks_uri_Valid() const;

    QString getOverrideAudience() const;
    void setOverrideAudience(const QString &override_audience);
    bool is_override_audience_Set() const;
    bool is_override_audience_Valid() const;

    QList<QString> getResponseTypesSupported() const;
    void setResponseTypesSupported(const QList<QString> &response_types_supported);
    bool is_response_types_supported_Set() const;
    bool is_response_types_supported_Valid() const;

    QList<OAIIdentity_provider_oauth2_scope> getScopes() const;
    void setScopes(const QList<OAIIdentity_provider_oauth2_scope> &scopes);
    bool is_scopes_Set() const;
    bool is_scopes_Valid() const;

    QString getTokenEndpoint() const;
    void setTokenEndpoint(const QString &token_endpoint);
    bool is_token_endpoint_Set() const;
    bool is_token_endpoint_Valid() const;

    QString getWebUiClientId() const;
    void setWebUiClientId(const QString &web_ui_client_id);
    bool is_web_ui_client_id_Set() const;
    bool is_web_ui_client_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString authorization_endpoint;
    bool m_authorization_endpoint_isSet;
    bool m_authorization_endpoint_isValid;

    QString device_authorization_endpoint;
    bool m_device_authorization_endpoint_isSet;
    bool m_device_authorization_endpoint_isValid;

    QString device_client_id;
    bool m_device_client_id_isSet;
    bool m_device_client_id_isValid;

    QString end_session_endpoint;
    bool m_end_session_endpoint_isSet;
    bool m_end_session_endpoint_isValid;

    QList<QString> grant_types_supported;
    bool m_grant_types_supported_isSet;
    bool m_grant_types_supported_isValid;

    bool has_web_ui_client_secret;
    bool m_has_web_ui_client_secret_isSet;
    bool m_has_web_ui_client_secret_isValid;

    QString issuer;
    bool m_issuer_isSet;
    bool m_issuer_isValid;

    QString jwks_uri;
    bool m_jwks_uri_isSet;
    bool m_jwks_uri_isValid;

    QString override_audience;
    bool m_override_audience_isSet;
    bool m_override_audience_isValid;

    QList<QString> response_types_supported;
    bool m_response_types_supported_isSet;
    bool m_response_types_supported_isValid;

    QList<OAIIdentity_provider_oauth2_scope> scopes;
    bool m_scopes_isSet;
    bool m_scopes_isValid;

    QString token_endpoint;
    bool m_token_endpoint_isSet;
    bool m_token_endpoint_isValid;

    QString web_ui_client_id;
    bool m_web_ui_client_id_isSet;
    bool m_web_ui_client_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIdentity_provider_oauth2)

#endif // OAIIdentity_provider_oauth2_H
