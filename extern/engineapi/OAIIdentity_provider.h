/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 25.04.23
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIdentity_provider.h
 *
 * 
 */

#ifndef OAIIdentity_provider_H
#define OAIIdentity_provider_H

#include <QJsonObject>

#include "OAIIdentity_provider_oauth2.h"
#include "OAIIdentity_provider_oidc.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIIdentity_provider_oauth2;
class OAIIdentity_provider_oidc;

class OAIIdentity_provider : public OAIObject {
public:
    OAIIdentity_provider();
    OAIIdentity_provider(QString json);
    ~OAIIdentity_provider() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isHidden() const;
    void setHidden(const bool &hidden);
    bool is_hidden_Set() const;
    bool is_hidden_Valid() const;

    bool isIsLdapIdentityProvider() const;
    void setIsLdapIdentityProvider(const bool &is_ldap_identity_provider);
    bool is_is_ldap_identity_provider_Set() const;
    bool is_is_ldap_identity_provider_Valid() const;

    bool isIsMainIdentityProvider() const;
    void setIsMainIdentityProvider(const bool &is_main_identity_provider);
    bool is_is_main_identity_provider_Set() const;
    bool is_is_main_identity_provider_Valid() const;

    QString getLabel() const;
    void setLabel(const QString &label);
    bool is_label_Set() const;
    bool is_label_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIIdentity_provider_oauth2 getOauth2() const;
    void setOauth2(const OAIIdentity_provider_oauth2 &oauth2);
    bool is_oauth2_Set() const;
    bool is_oauth2_Valid() const;

    OAIIdentity_provider_oidc getOidc() const;
    void setOidc(const OAIIdentity_provider_oidc &oidc);
    bool is_oidc_Set() const;
    bool is_oidc_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_hidden;
    bool m_hidden_isSet;
    bool m_hidden_isValid;

    bool m_is_ldap_identity_provider;
    bool m_is_ldap_identity_provider_isSet;
    bool m_is_ldap_identity_provider_isValid;

    bool m_is_main_identity_provider;
    bool m_is_main_identity_provider_isSet;
    bool m_is_main_identity_provider_isValid;

    QString m_label;
    bool m_label_isSet;
    bool m_label_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIIdentity_provider_oauth2 m_oauth2;
    bool m_oauth2_isSet;
    bool m_oauth2_isValid;

    OAIIdentity_provider_oidc m_oidc;
    bool m_oidc_isSet;
    bool m_oidc_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIdentity_provider)

#endif // OAIIdentity_provider_H
