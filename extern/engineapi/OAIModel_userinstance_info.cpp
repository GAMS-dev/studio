/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 23.06.02
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModel_userinstance_info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModel_userinstance_info::OAIModel_userinstance_info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModel_userinstance_info::OAIModel_userinstance_info() {
    this->initializeModel();
}

OAIModel_userinstance_info::~OAIModel_userinstance_info() {}

void OAIModel_userinstance_info::initializeModel() {

    m_default_inherited_from_isSet = false;
    m_default_inherited_from_isValid = false;

    m_default_instance_isSet = false;
    m_default_instance_isValid = false;

    m_instances_available_isSet = false;
    m_instances_available_isValid = false;

    m_instances_inherited_from_isSet = false;
    m_instances_inherited_from_isValid = false;
}

void OAIModel_userinstance_info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModel_userinstance_info::fromJsonObject(QJsonObject json) {

    m_default_inherited_from_isValid = ::OpenAPI::fromJsonValue(default_inherited_from, json[QString("default_inherited_from")]);
    m_default_inherited_from_isSet = !json[QString("default_inherited_from")].isNull() && m_default_inherited_from_isValid;

    m_default_instance_isValid = ::OpenAPI::fromJsonValue(default_instance, json[QString("default_instance")]);
    m_default_instance_isSet = !json[QString("default_instance")].isNull() && m_default_instance_isValid;

    m_instances_available_isValid = ::OpenAPI::fromJsonValue(instances_available, json[QString("instances_available")]);
    m_instances_available_isSet = !json[QString("instances_available")].isNull() && m_instances_available_isValid;

    m_instances_inherited_from_isValid = ::OpenAPI::fromJsonValue(instances_inherited_from, json[QString("instances_inherited_from")]);
    m_instances_inherited_from_isSet = !json[QString("instances_inherited_from")].isNull() && m_instances_inherited_from_isValid;
}

QString OAIModel_userinstance_info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModel_userinstance_info::asJsonObject() const {
    QJsonObject obj;
    if (m_default_inherited_from_isSet) {
        obj.insert(QString("default_inherited_from"), ::OpenAPI::toJsonValue(default_inherited_from));
    }
    if (default_instance.isSet()) {
        obj.insert(QString("default_instance"), ::OpenAPI::toJsonValue(default_instance));
    }
    if (instances_available.size() > 0) {
        obj.insert(QString("instances_available"), ::OpenAPI::toJsonValue(instances_available));
    }
    if (m_instances_inherited_from_isSet) {
        obj.insert(QString("instances_inherited_from"), ::OpenAPI::toJsonValue(instances_inherited_from));
    }
    return obj;
}

QString OAIModel_userinstance_info::getDefaultInheritedFrom() const {
    return default_inherited_from;
}
void OAIModel_userinstance_info::setDefaultInheritedFrom(const QString &default_inherited_from) {
    this->default_inherited_from = default_inherited_from;
    this->m_default_inherited_from_isSet = true;
}

bool OAIModel_userinstance_info::is_default_inherited_from_Set() const{
    return m_default_inherited_from_isSet;
}

bool OAIModel_userinstance_info::is_default_inherited_from_Valid() const{
    return m_default_inherited_from_isValid;
}

OAIModel_instance_info OAIModel_userinstance_info::getDefaultInstance() const {
    return default_instance;
}
void OAIModel_userinstance_info::setDefaultInstance(const OAIModel_instance_info &default_instance) {
    this->default_instance = default_instance;
    this->m_default_instance_isSet = true;
}

bool OAIModel_userinstance_info::is_default_instance_Set() const{
    return m_default_instance_isSet;
}

bool OAIModel_userinstance_info::is_default_instance_Valid() const{
    return m_default_instance_isValid;
}

QList<OAIModel_instance_info> OAIModel_userinstance_info::getInstancesAvailable() const {
    return instances_available;
}
void OAIModel_userinstance_info::setInstancesAvailable(const QList<OAIModel_instance_info> &instances_available) {
    this->instances_available = instances_available;
    this->m_instances_available_isSet = true;
}

bool OAIModel_userinstance_info::is_instances_available_Set() const{
    return m_instances_available_isSet;
}

bool OAIModel_userinstance_info::is_instances_available_Valid() const{
    return m_instances_available_isValid;
}

QString OAIModel_userinstance_info::getInstancesInheritedFrom() const {
    return instances_inherited_from;
}
void OAIModel_userinstance_info::setInstancesInheritedFrom(const QString &instances_inherited_from) {
    this->instances_inherited_from = instances_inherited_from;
    this->m_instances_inherited_from_isSet = true;
}

bool OAIModel_userinstance_info::is_instances_inherited_from_Set() const{
    return m_instances_inherited_from_isSet;
}

bool OAIModel_userinstance_info::is_instances_inherited_from_Valid() const{
    return m_instances_inherited_from_isValid;
}

bool OAIModel_userinstance_info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_inherited_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (default_instance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (instances_available.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances_inherited_from_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModel_userinstance_info::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
