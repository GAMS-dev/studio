/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_groups.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_groups::OAIUser_groups(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_groups::OAIUser_groups() {
    this->initializeModel();
}

OAIUser_groups::~OAIUser_groups() {}

void OAIUser_groups::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_owned_by_isSet = false;
    m_owned_by_isValid = false;
}

void OAIUser_groups::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_groups::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_owned_by_isValid = ::OpenAPI::fromJsonValue(owned_by, json[QString("owned_by")]);
    m_owned_by_isSet = !json[QString("owned_by")].isNull() && m_owned_by_isValid;
}

QString OAIUser_groups::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_groups::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(created_at));
    }
    if (created_by.isSet()) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(created_by));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(label));
    }
    if (members.size() > 0) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(members));
    }
    if (m_owned_by_isSet) {
        obj.insert(QString("owned_by"), ::OpenAPI::toJsonValue(owned_by));
    }
    return obj;
}

QDateTime OAIUser_groups::getCreatedAt() const {
    return created_at;
}
void OAIUser_groups::setCreatedAt(const QDateTime &created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

bool OAIUser_groups::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUser_groups::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIModel_user OAIUser_groups::getCreatedBy() const {
    return created_by;
}
void OAIUser_groups::setCreatedBy(const OAIModel_user &created_by) {
    this->created_by = created_by;
    this->m_created_by_isSet = true;
}

bool OAIUser_groups::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIUser_groups::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIUser_groups::getLabel() const {
    return label;
}
void OAIUser_groups::setLabel(const QString &label) {
    this->label = label;
    this->m_label_isSet = true;
}

bool OAIUser_groups::is_label_Set() const{
    return m_label_isSet;
}

bool OAIUser_groups::is_label_Valid() const{
    return m_label_isValid;
}

QList<OAIUser_group_member> OAIUser_groups::getMembers() const {
    return members;
}
void OAIUser_groups::setMembers(const QList<OAIUser_group_member> &members) {
    this->members = members;
    this->m_members_isSet = true;
}

bool OAIUser_groups::is_members_Set() const{
    return m_members_isSet;
}

bool OAIUser_groups::is_members_Valid() const{
    return m_members_isValid;
}

QString OAIUser_groups::getOwnedBy() const {
    return owned_by;
}
void OAIUser_groups::setOwnedBy(const QString &owned_by) {
    this->owned_by = owned_by;
    this->m_owned_by_isSet = true;
}

bool OAIUser_groups::is_owned_by_Set() const{
    return m_owned_by_isSet;
}

bool OAIUser_groups::is_owned_by_Valid() const{
    return m_owned_by_isValid;
}

bool OAIUser_groups::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_owned_by_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_groups::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
