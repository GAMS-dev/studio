/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModel_instance_info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModel_instance_info::OAIModel_instance_info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModel_instance_info::OAIModel_instance_info() {
    this->initializeModel();
}

OAIModel_instance_info::~OAIModel_instance_info() {}

void OAIModel_instance_info::initializeModel() {

    m_cpu_request_isSet = false;
    m_cpu_request_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_memory_request_isSet = false;
    m_memory_request_isValid = false;

    m_multiplier_isSet = false;
    m_multiplier_isValid = false;

    m_multiplier_idle_isSet = false;
    m_multiplier_idle_isValid = false;

    m_node_selectors_isSet = false;
    m_node_selectors_isValid = false;

    m_tolerations_isSet = false;
    m_tolerations_isValid = false;

    m_workspace_request_isSet = false;
    m_workspace_request_isValid = false;
}

void OAIModel_instance_info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModel_instance_info::fromJsonObject(QJsonObject json) {

    m_cpu_request_isValid = ::OpenAPI::fromJsonValue(cpu_request, json[QString("cpu_request")]);
    m_cpu_request_isSet = !json[QString("cpu_request")].isNull() && m_cpu_request_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_memory_request_isValid = ::OpenAPI::fromJsonValue(memory_request, json[QString("memory_request")]);
    m_memory_request_isSet = !json[QString("memory_request")].isNull() && m_memory_request_isValid;

    m_multiplier_isValid = ::OpenAPI::fromJsonValue(multiplier, json[QString("multiplier")]);
    m_multiplier_isSet = !json[QString("multiplier")].isNull() && m_multiplier_isValid;

    m_multiplier_idle_isValid = ::OpenAPI::fromJsonValue(multiplier_idle, json[QString("multiplier_idle")]);
    m_multiplier_idle_isSet = !json[QString("multiplier_idle")].isNull() && m_multiplier_idle_isValid;

    m_node_selectors_isValid = ::OpenAPI::fromJsonValue(node_selectors, json[QString("node_selectors")]);
    m_node_selectors_isSet = !json[QString("node_selectors")].isNull() && m_node_selectors_isValid;

    m_tolerations_isValid = ::OpenAPI::fromJsonValue(tolerations, json[QString("tolerations")]);
    m_tolerations_isSet = !json[QString("tolerations")].isNull() && m_tolerations_isValid;

    m_workspace_request_isValid = ::OpenAPI::fromJsonValue(workspace_request, json[QString("workspace_request")]);
    m_workspace_request_isSet = !json[QString("workspace_request")].isNull() && m_workspace_request_isValid;
}

QString OAIModel_instance_info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModel_instance_info::asJsonObject() const {
    QJsonObject obj;
    if (m_cpu_request_isSet) {
        obj.insert(QString("cpu_request"), ::OpenAPI::toJsonValue(cpu_request));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(label));
    }
    if (m_memory_request_isSet) {
        obj.insert(QString("memory_request"), ::OpenAPI::toJsonValue(memory_request));
    }
    if (m_multiplier_isSet) {
        obj.insert(QString("multiplier"), ::OpenAPI::toJsonValue(multiplier));
    }
    if (m_multiplier_idle_isSet) {
        obj.insert(QString("multiplier_idle"), ::OpenAPI::toJsonValue(multiplier_idle));
    }
    if (node_selectors.size() > 0) {
        obj.insert(QString("node_selectors"), ::OpenAPI::toJsonValue(node_selectors));
    }
    if (tolerations.size() > 0) {
        obj.insert(QString("tolerations"), ::OpenAPI::toJsonValue(tolerations));
    }
    if (m_workspace_request_isSet) {
        obj.insert(QString("workspace_request"), ::OpenAPI::toJsonValue(workspace_request));
    }
    return obj;
}

double OAIModel_instance_info::getCpuRequest() const {
    return cpu_request;
}
void OAIModel_instance_info::setCpuRequest(const double &cpu_request) {
    this->cpu_request = cpu_request;
    this->m_cpu_request_isSet = true;
}

bool OAIModel_instance_info::is_cpu_request_Set() const{
    return m_cpu_request_isSet;
}

bool OAIModel_instance_info::is_cpu_request_Valid() const{
    return m_cpu_request_isValid;
}

QString OAIModel_instance_info::getLabel() const {
    return label;
}
void OAIModel_instance_info::setLabel(const QString &label) {
    this->label = label;
    this->m_label_isSet = true;
}

bool OAIModel_instance_info::is_label_Set() const{
    return m_label_isSet;
}

bool OAIModel_instance_info::is_label_Valid() const{
    return m_label_isValid;
}

qint32 OAIModel_instance_info::getMemoryRequest() const {
    return memory_request;
}
void OAIModel_instance_info::setMemoryRequest(const qint32 &memory_request) {
    this->memory_request = memory_request;
    this->m_memory_request_isSet = true;
}

bool OAIModel_instance_info::is_memory_request_Set() const{
    return m_memory_request_isSet;
}

bool OAIModel_instance_info::is_memory_request_Valid() const{
    return m_memory_request_isValid;
}

double OAIModel_instance_info::getMultiplier() const {
    return multiplier;
}
void OAIModel_instance_info::setMultiplier(const double &multiplier) {
    this->multiplier = multiplier;
    this->m_multiplier_isSet = true;
}

bool OAIModel_instance_info::is_multiplier_Set() const{
    return m_multiplier_isSet;
}

bool OAIModel_instance_info::is_multiplier_Valid() const{
    return m_multiplier_isValid;
}

double OAIModel_instance_info::getMultiplierIdle() const {
    return multiplier_idle;
}
void OAIModel_instance_info::setMultiplierIdle(const double &multiplier_idle) {
    this->multiplier_idle = multiplier_idle;
    this->m_multiplier_idle_isSet = true;
}

bool OAIModel_instance_info::is_multiplier_idle_Set() const{
    return m_multiplier_idle_isSet;
}

bool OAIModel_instance_info::is_multiplier_idle_Valid() const{
    return m_multiplier_idle_isValid;
}

QList<OAIGeneric_key_value_pair> OAIModel_instance_info::getNodeSelectors() const {
    return node_selectors;
}
void OAIModel_instance_info::setNodeSelectors(const QList<OAIGeneric_key_value_pair> &node_selectors) {
    this->node_selectors = node_selectors;
    this->m_node_selectors_isSet = true;
}

bool OAIModel_instance_info::is_node_selectors_Set() const{
    return m_node_selectors_isSet;
}

bool OAIModel_instance_info::is_node_selectors_Valid() const{
    return m_node_selectors_isValid;
}

QList<OAIGeneric_key_value_pair> OAIModel_instance_info::getTolerations() const {
    return tolerations;
}
void OAIModel_instance_info::setTolerations(const QList<OAIGeneric_key_value_pair> &tolerations) {
    this->tolerations = tolerations;
    this->m_tolerations_isSet = true;
}

bool OAIModel_instance_info::is_tolerations_Set() const{
    return m_tolerations_isSet;
}

bool OAIModel_instance_info::is_tolerations_Valid() const{
    return m_tolerations_isValid;
}

qint32 OAIModel_instance_info::getWorkspaceRequest() const {
    return workspace_request;
}
void OAIModel_instance_info::setWorkspaceRequest(const qint32 &workspace_request) {
    this->workspace_request = workspace_request;
    this->m_workspace_request_isSet = true;
}

bool OAIModel_instance_info::is_workspace_request_Set() const{
    return m_workspace_request_isSet;
}

bool OAIModel_instance_info::is_workspace_request_Valid() const{
    return m_workspace_request_isValid;
}

bool OAIModel_instance_info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpu_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiplier_idle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (node_selectors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (tolerations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_request_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModel_instance_info::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
