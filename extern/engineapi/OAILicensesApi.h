/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 25.04.23
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILicensesApi_H
#define OAI_OAILicensesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEngine_license.h"
#include "OAILicense.h"
#include "OAIMessage.h"
#include "OAISystem_wide_license.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILicensesApi : public QObject {
    Q_OBJECT

public:
    OAILicensesApi(const int timeOut = 0);
    ~OAILicensesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  username QString [required]
    */
    virtual void deleteLicense(const QString &username);


    virtual void deleteSystemWideGAMSLicense();


    virtual void getEngineLicense();

    /**
    * @param[in]  username QString [optional]
    * @param[in]  x_fields QString [optional]
    * @param[in]  only_owners bool [optional]
    */
    virtual void getLicense(const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &only_owners = ::OpenAPI::OptionalParam<bool>());


    virtual void getSystemWideGAMSLicense();

    /**
    * @param[in]  license QString [required]
    */
    virtual void updateEngineLicense(const QString &license);

    /**
    * @param[in]  username QString [required]
    * @param[in]  license QString [required]
    */
    virtual void updateLicense(const QString &username, const QString &license);

    /**
    * @param[in]  license QString [required]
    */
    virtual void updateSystemWideGAMSLicense(const QString &license);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteLicenseCallback(OAIHttpRequestWorker *worker);
    void deleteSystemWideGAMSLicenseCallback(OAIHttpRequestWorker *worker);
    void getEngineLicenseCallback(OAIHttpRequestWorker *worker);
    void getLicenseCallback(OAIHttpRequestWorker *worker);
    void getSystemWideGAMSLicenseCallback(OAIHttpRequestWorker *worker);
    void updateEngineLicenseCallback(OAIHttpRequestWorker *worker);
    void updateLicenseCallback(OAIHttpRequestWorker *worker);
    void updateSystemWideGAMSLicenseCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteLicenseSignal(OAIMessage summary);
    void deleteSystemWideGAMSLicenseSignal(OAIMessage summary);
    void getEngineLicenseSignal(OAIEngine_license summary);
    void getLicenseSignal(QList<OAILicense> summary);
    void getSystemWideGAMSLicenseSignal(OAISystem_wide_license summary);
    void updateEngineLicenseSignal(OAIMessage summary);
    void updateLicenseSignal(OAIMessage summary);
    void updateSystemWideGAMSLicenseSignal(OAIMessage summary);


    void deleteLicenseSignalFull(OAIHttpRequestWorker *worker, OAIMessage summary);
    void deleteSystemWideGAMSLicenseSignalFull(OAIHttpRequestWorker *worker, OAIMessage summary);
    void getEngineLicenseSignalFull(OAIHttpRequestWorker *worker, OAIEngine_license summary);
    void getLicenseSignalFull(OAIHttpRequestWorker *worker, QList<OAILicense> summary);
    void getSystemWideGAMSLicenseSignalFull(OAIHttpRequestWorker *worker, OAISystem_wide_license summary);
    void updateEngineLicenseSignalFull(OAIHttpRequestWorker *worker, OAIMessage summary);
    void updateLicenseSignalFull(OAIHttpRequestWorker *worker, OAIMessage summary);
    void updateSystemWideGAMSLicenseSignalFull(OAIHttpRequestWorker *worker, OAIMessage summary);

    Q_DECL_DEPRECATED_X("Use deleteLicenseSignalError() instead")
    void deleteLicenseSignalE(OAIMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLicenseSignalError(OAIMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSystemWideGAMSLicenseSignalError() instead")
    void deleteSystemWideGAMSLicenseSignalE(OAIMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSystemWideGAMSLicenseSignalError(OAIMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEngineLicenseSignalError() instead")
    void getEngineLicenseSignalE(OAIEngine_license summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEngineLicenseSignalError(OAIEngine_license summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLicenseSignalError() instead")
    void getLicenseSignalE(QList<OAILicense> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLicenseSignalError(QList<OAILicense> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSystemWideGAMSLicenseSignalError() instead")
    void getSystemWideGAMSLicenseSignalE(OAISystem_wide_license summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSystemWideGAMSLicenseSignalError(OAISystem_wide_license summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEngineLicenseSignalError() instead")
    void updateEngineLicenseSignalE(OAIMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEngineLicenseSignalError(OAIMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLicenseSignalError() instead")
    void updateLicenseSignalE(OAIMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLicenseSignalError(OAIMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSystemWideGAMSLicenseSignalError() instead")
    void updateSystemWideGAMSLicenseSignalE(OAIMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSystemWideGAMSLicenseSignalError(OAIMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteLicenseSignalErrorFull() instead")
    void deleteLicenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLicenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSystemWideGAMSLicenseSignalErrorFull() instead")
    void deleteSystemWideGAMSLicenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSystemWideGAMSLicenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEngineLicenseSignalErrorFull() instead")
    void getEngineLicenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEngineLicenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLicenseSignalErrorFull() instead")
    void getLicenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLicenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSystemWideGAMSLicenseSignalErrorFull() instead")
    void getSystemWideGAMSLicenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSystemWideGAMSLicenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEngineLicenseSignalErrorFull() instead")
    void updateEngineLicenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEngineLicenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLicenseSignalErrorFull() instead")
    void updateLicenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLicenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSystemWideGAMSLicenseSignalErrorFull() instead")
    void updateSystemWideGAMSLicenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSystemWideGAMSLicenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
