/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 25.04.23
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHypercube_summary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHypercube_summary::OAIHypercube_summary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHypercube_summary::OAIHypercube_summary() {
    this->initializeModel();
}

OAIHypercube_summary::~OAIHypercube_summary() {}

void OAIHypercube_summary::initializeModel() {

    m_finished_isSet = false;
    m_finished_isValid = false;

    m_finished_with_status_code_zero_isSet = false;
    m_finished_with_status_code_zero_isValid = false;

    m_job_count_isSet = false;
    m_job_count_isValid = false;
}

void OAIHypercube_summary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHypercube_summary::fromJsonObject(QJsonObject json) {

    m_finished_isValid = ::OpenAPI::fromJsonValue(m_finished, json[QString("finished")]);
    m_finished_isSet = !json[QString("finished")].isNull() && m_finished_isValid;

    m_finished_with_status_code_zero_isValid = ::OpenAPI::fromJsonValue(m_finished_with_status_code_zero, json[QString("finished_with_status_code_zero")]);
    m_finished_with_status_code_zero_isSet = !json[QString("finished_with_status_code_zero")].isNull() && m_finished_with_status_code_zero_isValid;

    m_job_count_isValid = ::OpenAPI::fromJsonValue(m_job_count, json[QString("job_count")]);
    m_job_count_isSet = !json[QString("job_count")].isNull() && m_job_count_isValid;
}

QString OAIHypercube_summary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHypercube_summary::asJsonObject() const {
    QJsonObject obj;
    if (m_finished_isSet) {
        obj.insert(QString("finished"), ::OpenAPI::toJsonValue(m_finished));
    }
    if (m_finished_with_status_code_zero_isSet) {
        obj.insert(QString("finished_with_status_code_zero"), ::OpenAPI::toJsonValue(m_finished_with_status_code_zero));
    }
    if (m_job_count_isSet) {
        obj.insert(QString("job_count"), ::OpenAPI::toJsonValue(m_job_count));
    }
    return obj;
}

qint32 OAIHypercube_summary::getFinished() const {
    return m_finished;
}
void OAIHypercube_summary::setFinished(const qint32 &finished) {
    m_finished = finished;
    m_finished_isSet = true;
}

bool OAIHypercube_summary::is_finished_Set() const{
    return m_finished_isSet;
}

bool OAIHypercube_summary::is_finished_Valid() const{
    return m_finished_isValid;
}

qint32 OAIHypercube_summary::getFinishedWithStatusCodeZero() const {
    return m_finished_with_status_code_zero;
}
void OAIHypercube_summary::setFinishedWithStatusCodeZero(const qint32 &finished_with_status_code_zero) {
    m_finished_with_status_code_zero = finished_with_status_code_zero;
    m_finished_with_status_code_zero_isSet = true;
}

bool OAIHypercube_summary::is_finished_with_status_code_zero_Set() const{
    return m_finished_with_status_code_zero_isSet;
}

bool OAIHypercube_summary::is_finished_with_status_code_zero_Valid() const{
    return m_finished_with_status_code_zero_isValid;
}

qint32 OAIHypercube_summary::getJobCount() const {
    return m_job_count;
}
void OAIHypercube_summary::setJobCount(const qint32 &job_count) {
    m_job_count = job_count;
    m_job_count_isSet = true;
}

bool OAIHypercube_summary::is_job_count_Set() const{
    return m_job_count_isSet;
}

bool OAIHypercube_summary::is_job_count_Valid() const{
    return m_job_count_isValid;
}

bool OAIHypercube_summary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_finished_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_with_status_code_zero_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHypercube_summary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
