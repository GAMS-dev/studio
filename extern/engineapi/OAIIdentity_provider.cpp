/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 23.06.02
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentity_provider.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentity_provider::OAIIdentity_provider(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentity_provider::OAIIdentity_provider() {
    this->initializeModel();
}

OAIIdentity_provider::~OAIIdentity_provider() {}

void OAIIdentity_provider::initializeModel() {

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_is_ldap_identity_provider_isSet = false;
    m_is_ldap_identity_provider_isValid = false;

    m_is_main_identity_provider_isSet = false;
    m_is_main_identity_provider_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_oauth2_isSet = false;
    m_oauth2_isValid = false;

    m_oidc_isSet = false;
    m_oidc_isValid = false;
}

void OAIIdentity_provider::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentity_provider::fromJsonObject(QJsonObject json) {

    m_hidden_isValid = ::OpenAPI::fromJsonValue(hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_is_ldap_identity_provider_isValid = ::OpenAPI::fromJsonValue(is_ldap_identity_provider, json[QString("is_ldap_identity_provider")]);
    m_is_ldap_identity_provider_isSet = !json[QString("is_ldap_identity_provider")].isNull() && m_is_ldap_identity_provider_isValid;

    m_is_main_identity_provider_isValid = ::OpenAPI::fromJsonValue(is_main_identity_provider, json[QString("is_main_identity_provider")]);
    m_is_main_identity_provider_isSet = !json[QString("is_main_identity_provider")].isNull() && m_is_main_identity_provider_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_oauth2_isValid = ::OpenAPI::fromJsonValue(oauth2, json[QString("oauth2")]);
    m_oauth2_isSet = !json[QString("oauth2")].isNull() && m_oauth2_isValid;

    m_oidc_isValid = ::OpenAPI::fromJsonValue(oidc, json[QString("oidc")]);
    m_oidc_isSet = !json[QString("oidc")].isNull() && m_oidc_isValid;
}

QString OAIIdentity_provider::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentity_provider::asJsonObject() const {
    QJsonObject obj;
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(hidden));
    }
    if (m_is_ldap_identity_provider_isSet) {
        obj.insert(QString("is_ldap_identity_provider"), ::OpenAPI::toJsonValue(is_ldap_identity_provider));
    }
    if (m_is_main_identity_provider_isSet) {
        obj.insert(QString("is_main_identity_provider"), ::OpenAPI::toJsonValue(is_main_identity_provider));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(label));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (oauth2.isSet()) {
        obj.insert(QString("oauth2"), ::OpenAPI::toJsonValue(oauth2));
    }
    if (oidc.isSet()) {
        obj.insert(QString("oidc"), ::OpenAPI::toJsonValue(oidc));
    }
    return obj;
}

bool OAIIdentity_provider::isHidden() const {
    return hidden;
}
void OAIIdentity_provider::setHidden(const bool &hidden) {
    this->hidden = hidden;
    this->m_hidden_isSet = true;
}

bool OAIIdentity_provider::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAIIdentity_provider::is_hidden_Valid() const{
    return m_hidden_isValid;
}

bool OAIIdentity_provider::isIsLdapIdentityProvider() const {
    return is_ldap_identity_provider;
}
void OAIIdentity_provider::setIsLdapIdentityProvider(const bool &is_ldap_identity_provider) {
    this->is_ldap_identity_provider = is_ldap_identity_provider;
    this->m_is_ldap_identity_provider_isSet = true;
}

bool OAIIdentity_provider::is_is_ldap_identity_provider_Set() const{
    return m_is_ldap_identity_provider_isSet;
}

bool OAIIdentity_provider::is_is_ldap_identity_provider_Valid() const{
    return m_is_ldap_identity_provider_isValid;
}

bool OAIIdentity_provider::isIsMainIdentityProvider() const {
    return is_main_identity_provider;
}
void OAIIdentity_provider::setIsMainIdentityProvider(const bool &is_main_identity_provider) {
    this->is_main_identity_provider = is_main_identity_provider;
    this->m_is_main_identity_provider_isSet = true;
}

bool OAIIdentity_provider::is_is_main_identity_provider_Set() const{
    return m_is_main_identity_provider_isSet;
}

bool OAIIdentity_provider::is_is_main_identity_provider_Valid() const{
    return m_is_main_identity_provider_isValid;
}

QString OAIIdentity_provider::getLabel() const {
    return label;
}
void OAIIdentity_provider::setLabel(const QString &label) {
    this->label = label;
    this->m_label_isSet = true;
}

bool OAIIdentity_provider::is_label_Set() const{
    return m_label_isSet;
}

bool OAIIdentity_provider::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIIdentity_provider::getName() const {
    return name;
}
void OAIIdentity_provider::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIIdentity_provider::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIdentity_provider::is_name_Valid() const{
    return m_name_isValid;
}

OAIIdentity_provider_oauth2 OAIIdentity_provider::getOauth2() const {
    return oauth2;
}
void OAIIdentity_provider::setOauth2(const OAIIdentity_provider_oauth2 &oauth2) {
    this->oauth2 = oauth2;
    this->m_oauth2_isSet = true;
}

bool OAIIdentity_provider::is_oauth2_Set() const{
    return m_oauth2_isSet;
}

bool OAIIdentity_provider::is_oauth2_Valid() const{
    return m_oauth2_isValid;
}

OAIIdentity_provider_oidc OAIIdentity_provider::getOidc() const {
    return oidc;
}
void OAIIdentity_provider::setOidc(const OAIIdentity_provider_oidc &oidc) {
    this->oidc = oidc;
    this->m_oidc_isSet = true;
}

bool OAIIdentity_provider::is_oidc_Set() const{
    return m_oidc_isSet;
}

bool OAIIdentity_provider::is_oidc_Valid() const{
    return m_oidc_isValid;
}

bool OAIIdentity_provider::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_ldap_identity_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_main_identity_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (oauth2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (oidc.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentity_provider::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
