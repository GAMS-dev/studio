/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 23.06.02
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModel_pool_usage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModel_pool_usage::OAIModel_pool_usage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModel_pool_usage::OAIModel_pool_usage() {
    this->initializeModel();
}

OAIModel_pool_usage::~OAIModel_pool_usage() {}

void OAIModel_pool_usage::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deleted_at_isSet = false;
    m_deleted_at_isValid = false;

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_times_isSet = false;
    m_times_isValid = false;
}

void OAIModel_pool_usage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModel_pool_usage::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_deleted_at_isValid = ::OpenAPI::fromJsonValue(deleted_at, json[QString("deleted_at")]);
    m_deleted_at_isSet = !json[QString("deleted_at")].isNull() && m_deleted_at_isValid;

    m_instance_isValid = ::OpenAPI::fromJsonValue(instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_times_isValid = ::OpenAPI::fromJsonValue(times, json[QString("times")]);
    m_times_isSet = !json[QString("times")].isNull() && m_times_isValid;
}

QString OAIModel_pool_usage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModel_pool_usage::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(created_at));
    }
    if (m_deleted_at_isSet) {
        obj.insert(QString("deleted_at"), ::OpenAPI::toJsonValue(deleted_at));
    }
    if (instance.isSet()) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(instance));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(label));
    }
    if (owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(owner));
    }
    if (times.size() > 0) {
        obj.insert(QString("times"), ::OpenAPI::toJsonValue(times));
    }
    return obj;
}

QDateTime OAIModel_pool_usage::getCreatedAt() const {
    return created_at;
}
void OAIModel_pool_usage::setCreatedAt(const QDateTime &created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

bool OAIModel_pool_usage::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIModel_pool_usage::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIModel_pool_usage::getDeletedAt() const {
    return deleted_at;
}
void OAIModel_pool_usage::setDeletedAt(const QDateTime &deleted_at) {
    this->deleted_at = deleted_at;
    this->m_deleted_at_isSet = true;
}

bool OAIModel_pool_usage::is_deleted_at_Set() const{
    return m_deleted_at_isSet;
}

bool OAIModel_pool_usage::is_deleted_at_Valid() const{
    return m_deleted_at_isValid;
}

OAIModel_instance_info OAIModel_pool_usage::getInstance() const {
    return instance;
}
void OAIModel_pool_usage::setInstance(const OAIModel_instance_info &instance) {
    this->instance = instance;
    this->m_instance_isSet = true;
}

bool OAIModel_pool_usage::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAIModel_pool_usage::is_instance_Valid() const{
    return m_instance_isValid;
}

QString OAIModel_pool_usage::getLabel() const {
    return label;
}
void OAIModel_pool_usage::setLabel(const QString &label) {
    this->label = label;
    this->m_label_isSet = true;
}

bool OAIModel_pool_usage::is_label_Set() const{
    return m_label_isSet;
}

bool OAIModel_pool_usage::is_label_Valid() const{
    return m_label_isValid;
}

OAIModel_user OAIModel_pool_usage::getOwner() const {
    return owner;
}
void OAIModel_pool_usage::setOwner(const OAIModel_user &owner) {
    this->owner = owner;
    this->m_owner_isSet = true;
}

bool OAIModel_pool_usage::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIModel_pool_usage::is_owner_Valid() const{
    return m_owner_isValid;
}

QList<OAITime_span_pool_worker> OAIModel_pool_usage::getTimes() const {
    return times;
}
void OAIModel_pool_usage::setTimes(const QList<OAITime_span_pool_worker> &times) {
    this->times = times;
    this->m_times_isSet = true;
}

bool OAIModel_pool_usage::is_times_Set() const{
    return m_times_isSet;
}

bool OAIModel_pool_usage::is_times_Valid() const{
    return m_times_isValid;
}

bool OAIModel_pool_usage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (instance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (times.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModel_pool_usage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
