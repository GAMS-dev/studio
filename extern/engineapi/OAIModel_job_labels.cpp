/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModel_job_labels.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModel_job_labels::OAIModel_job_labels(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModel_job_labels::OAIModel_job_labels() {
    this->initializeModel();
}

OAIModel_job_labels::~OAIModel_job_labels() {}

void OAIModel_job_labels::initializeModel() {

    m_cpu_request_isSet = false;
    m_cpu_request_isValid = false;

    m_memory_request_isSet = false;
    m_memory_request_isValid = false;
}

void OAIModel_job_labels::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModel_job_labels::fromJsonObject(QJsonObject json) {

    m_cpu_request_isValid = ::OpenAPI::fromJsonValue(cpu_request, json[QString("cpu_request")]);
    m_cpu_request_isSet = !json[QString("cpu_request")].isNull() && m_cpu_request_isValid;

    m_memory_request_isValid = ::OpenAPI::fromJsonValue(memory_request, json[QString("memory_request")]);
    m_memory_request_isSet = !json[QString("memory_request")].isNull() && m_memory_request_isValid;
}

QString OAIModel_job_labels::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModel_job_labels::asJsonObject() const {
    QJsonObject obj;
    if (m_cpu_request_isSet) {
        obj.insert(QString("cpu_request"), ::OpenAPI::toJsonValue(cpu_request));
    }
    if (m_memory_request_isSet) {
        obj.insert(QString("memory_request"), ::OpenAPI::toJsonValue(memory_request));
    }
    return obj;
}

double OAIModel_job_labels::getCpuRequest() const {
    return cpu_request;
}
void OAIModel_job_labels::setCpuRequest(const double &cpu_request) {
    this->cpu_request = cpu_request;
    this->m_cpu_request_isSet = true;
}

bool OAIModel_job_labels::is_cpu_request_Set() const{
    return m_cpu_request_isSet;
}

bool OAIModel_job_labels::is_cpu_request_Valid() const{
    return m_cpu_request_isValid;
}

qint32 OAIModel_job_labels::getMemoryRequest() const {
    return memory_request;
}
void OAIModel_job_labels::setMemoryRequest(const qint32 &memory_request) {
    this->memory_request = memory_request;
    this->m_memory_request_isSet = true;
}

bool OAIModel_job_labels::is_memory_request_Set() const{
    return m_memory_request_isSet;
}

bool OAIModel_job_labels::is_memory_request_Valid() const{
    return m_memory_request_isValid;
}

bool OAIModel_job_labels::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpu_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_request_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModel_job_labels::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
