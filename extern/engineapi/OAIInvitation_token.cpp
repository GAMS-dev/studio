/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 23.06.02
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvitation_token.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvitation_token::OAIInvitation_token(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvitation_token::OAIInvitation_token() {
    this->initializeModel();
}

OAIInvitation_token::~OAIInvitation_token() {}

void OAIInvitation_token::initializeModel() {

    m_invitation_token_isSet = false;
    m_invitation_token_isValid = false;
}

void OAIInvitation_token::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvitation_token::fromJsonObject(QJsonObject json) {

    m_invitation_token_isValid = ::OpenAPI::fromJsonValue(invitation_token, json[QString("invitation_token")]);
    m_invitation_token_isSet = !json[QString("invitation_token")].isNull() && m_invitation_token_isValid;
}

QString OAIInvitation_token::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvitation_token::asJsonObject() const {
    QJsonObject obj;
    if (m_invitation_token_isSet) {
        obj.insert(QString("invitation_token"), ::OpenAPI::toJsonValue(invitation_token));
    }
    return obj;
}

QString OAIInvitation_token::getInvitationToken() const {
    return invitation_token;
}
void OAIInvitation_token::setInvitationToken(const QString &invitation_token) {
    this->invitation_token = invitation_token;
    this->m_invitation_token_isSet = true;
}

bool OAIInvitation_token::is_invitation_token_Set() const{
    return m_invitation_token_isSet;
}

bool OAIInvitation_token::is_invitation_token_Valid() const{
    return m_invitation_token_isValid;
}

bool OAIInvitation_token::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_invitation_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvitation_token::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
