/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEngine_license.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEngine_license::OAIEngine_license(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEngine_license::OAIEngine_license() {
    this->initializeModel();
}

OAIEngine_license::~OAIEngine_license() {}

void OAIEngine_license::initializeModel() {

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_usi_isSet = false;
    m_usi_isValid = false;
}

void OAIEngine_license::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEngine_license::fromJsonObject(QJsonObject json) {

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(expiration_date, json[QString("expiration_date")]);
    m_expiration_date_isSet = !json[QString("expiration_date")].isNull() && m_expiration_date_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_usi_isValid = ::OpenAPI::fromJsonValue(usi, json[QString("usi")]);
    m_usi_isSet = !json[QString("usi")].isNull() && m_usi_isValid;
}

QString OAIEngine_license::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEngine_license::asJsonObject() const {
    QJsonObject obj;
    if (m_expiration_date_isSet) {
        obj.insert(QString("expiration_date"), ::OpenAPI::toJsonValue(expiration_date));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(license));
    }
    if (m_usi_isSet) {
        obj.insert(QString("usi"), ::OpenAPI::toJsonValue(usi));
    }
    return obj;
}

QDateTime OAIEngine_license::getExpirationDate() const {
    return expiration_date;
}
void OAIEngine_license::setExpirationDate(const QDateTime &expiration_date) {
    this->expiration_date = expiration_date;
    this->m_expiration_date_isSet = true;
}

bool OAIEngine_license::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIEngine_license::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAIEngine_license::getLicense() const {
    return license;
}
void OAIEngine_license::setLicense(const QString &license) {
    this->license = license;
    this->m_license_isSet = true;
}

bool OAIEngine_license::is_license_Set() const{
    return m_license_isSet;
}

bool OAIEngine_license::is_license_Valid() const{
    return m_license_isValid;
}

QString OAIEngine_license::getUsi() const {
    return usi;
}
void OAIEngine_license::setUsi(const QString &usi) {
    this->usi = usi;
    this->m_usi_isSet = true;
}

bool OAIEngine_license::is_usi_Set() const{
    return m_usi_isSet;
}

bool OAIEngine_license::is_usi_Valid() const{
    return m_usi_isValid;
}

bool OAIEngine_license::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usi_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEngine_license::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
