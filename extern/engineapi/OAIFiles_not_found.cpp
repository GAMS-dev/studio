/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 23.02.18
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFiles_not_found.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFiles_not_found::OAIFiles_not_found(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFiles_not_found::OAIFiles_not_found() {
    this->initializeModel();
}

OAIFiles_not_found::~OAIFiles_not_found() {}

void OAIFiles_not_found::initializeModel() {

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_hypercube_token_isSet = false;
    m_hypercube_token_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAIFiles_not_found::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFiles_not_found::fromJsonObject(QJsonObject json) {

    m_filename_isValid = ::OpenAPI::fromJsonValue(filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_hypercube_token_isValid = ::OpenAPI::fromJsonValue(hypercube_token, json[QString("hypercube_token")]);
    m_hypercube_token_isSet = !json[QString("hypercube_token")].isNull() && m_hypercube_token_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAIFiles_not_found::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFiles_not_found::asJsonObject() const {
    QJsonObject obj;
    if (filename.size() > 0) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(filename));
    }
    if (hypercube_token.size() > 0) {
        obj.insert(QString("hypercube_token"), ::OpenAPI::toJsonValue(hypercube_token));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(message));
    }
    if (token.size() > 0) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(token));
    }
    return obj;
}

QList<QString> OAIFiles_not_found::getFilename() const {
    return filename;
}
void OAIFiles_not_found::setFilename(const QList<QString> &filename) {
    this->filename = filename;
    this->m_filename_isSet = true;
}

bool OAIFiles_not_found::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIFiles_not_found::is_filename_Valid() const{
    return m_filename_isValid;
}

QList<QString> OAIFiles_not_found::getHypercubeToken() const {
    return hypercube_token;
}
void OAIFiles_not_found::setHypercubeToken(const QList<QString> &hypercube_token) {
    this->hypercube_token = hypercube_token;
    this->m_hypercube_token_isSet = true;
}

bool OAIFiles_not_found::is_hypercube_token_Set() const{
    return m_hypercube_token_isSet;
}

bool OAIFiles_not_found::is_hypercube_token_Valid() const{
    return m_hypercube_token_isValid;
}

QString OAIFiles_not_found::getMessage() const {
    return message;
}
void OAIFiles_not_found::setMessage(const QString &message) {
    this->message = message;
    this->m_message_isSet = true;
}

bool OAIFiles_not_found::is_message_Set() const{
    return m_message_isSet;
}

bool OAIFiles_not_found::is_message_Valid() const{
    return m_message_isValid;
}

QList<QString> OAIFiles_not_found::getToken() const {
    return token;
}
void OAIFiles_not_found::setToken(const QList<QString> &token) {
    this->token = token;
    this->m_token_isSet = true;
}

bool OAIFiles_not_found::is_token_Set() const{
    return m_token_isSet;
}

bool OAIFiles_not_found::is_token_Valid() const{
    return m_token_isValid;
}

bool OAIFiles_not_found::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (filename.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (hypercube_token.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (token.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFiles_not_found::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
