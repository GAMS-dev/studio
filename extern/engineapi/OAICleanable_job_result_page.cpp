/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICleanable_job_result_page.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICleanable_job_result_page::OAICleanable_job_result_page(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICleanable_job_result_page::OAICleanable_job_result_page() {
    this->initializeModel();
}

OAICleanable_job_result_page::~OAICleanable_job_result_page() {}

void OAICleanable_job_result_page::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_next_isSet = false;
    m_next_isValid = false;

    m_previous_isSet = false;
    m_previous_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_total_length_isSet = false;
    m_total_length_isValid = false;
}

void OAICleanable_job_result_page::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICleanable_job_result_page::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_next_isValid = ::OpenAPI::fromJsonValue(next, json[QString("next")]);
    m_next_isSet = !json[QString("next")].isNull() && m_next_isValid;

    m_previous_isValid = ::OpenAPI::fromJsonValue(previous, json[QString("previous")]);
    m_previous_isSet = !json[QString("previous")].isNull() && m_previous_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_total_length_isValid = ::OpenAPI::fromJsonValue(total_length, json[QString("total_length")]);
    m_total_length_isSet = !json[QString("total_length")].isNull() && m_total_length_isValid;
}

QString OAICleanable_job_result_page::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICleanable_job_result_page::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(count));
    }
    if (m_next_isSet) {
        obj.insert(QString("next"), ::OpenAPI::toJsonValue(next));
    }
    if (m_previous_isSet) {
        obj.insert(QString("previous"), ::OpenAPI::toJsonValue(previous));
    }
    if (results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(results));
    }
    if (m_total_length_isSet) {
        obj.insert(QString("total_length"), ::OpenAPI::toJsonValue(total_length));
    }
    return obj;
}

qint32 OAICleanable_job_result_page::getCount() const {
    return count;
}
void OAICleanable_job_result_page::setCount(const qint32 &count) {
    this->count = count;
    this->m_count_isSet = true;
}

bool OAICleanable_job_result_page::is_count_Set() const{
    return m_count_isSet;
}

bool OAICleanable_job_result_page::is_count_Valid() const{
    return m_count_isValid;
}

QString OAICleanable_job_result_page::getNext() const {
    return next;
}
void OAICleanable_job_result_page::setNext(const QString &next) {
    this->next = next;
    this->m_next_isSet = true;
}

bool OAICleanable_job_result_page::is_next_Set() const{
    return m_next_isSet;
}

bool OAICleanable_job_result_page::is_next_Valid() const{
    return m_next_isValid;
}

QString OAICleanable_job_result_page::getPrevious() const {
    return previous;
}
void OAICleanable_job_result_page::setPrevious(const QString &previous) {
    this->previous = previous;
    this->m_previous_isSet = true;
}

bool OAICleanable_job_result_page::is_previous_Set() const{
    return m_previous_isSet;
}

bool OAICleanable_job_result_page::is_previous_Valid() const{
    return m_previous_isValid;
}

QList<OAICleanable_job_result> OAICleanable_job_result_page::getResults() const {
    return results;
}
void OAICleanable_job_result_page::setResults(const QList<OAICleanable_job_result> &results) {
    this->results = results;
    this->m_results_isSet = true;
}

bool OAICleanable_job_result_page::is_results_Set() const{
    return m_results_isSet;
}

bool OAICleanable_job_result_page::is_results_Valid() const{
    return m_results_isValid;
}

qint32 OAICleanable_job_result_page::getTotalLength() const {
    return total_length;
}
void OAICleanable_job_result_page::setTotalLength(const qint32 &total_length) {
    this->total_length = total_length;
    this->m_total_length_isSet = true;
}

bool OAICleanable_job_result_page::is_total_length_Set() const{
    return m_total_length_isSet;
}

bool OAICleanable_job_result_page::is_total_length_Valid() const{
    return m_total_length_isValid;
}

bool OAICleanable_job_result_page::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_length_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICleanable_job_result_page::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
