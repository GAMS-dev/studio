/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 25.04.23
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHypercube.h
 *
 * 
 */

#ifndef OAIHypercube_H
#define OAIHypercube_H

#include <QJsonObject>

#include "OAIModel_job_labels.h"
#include "OAIModel_user.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIModel_user;

class OAIHypercube : public OAIObject {
public:
    OAIHypercube();
    OAIHypercube(QString json);
    ~OAIHypercube() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAccessGroups() const;
    void setAccessGroups(const QList<QString> &access_groups);
    bool is_access_groups_Set() const;
    bool is_access_groups_Valid() const;

    QList<QString> getArguments() const;
    void setArguments(const QList<QString> &arguments);
    bool is_arguments_Set() const;
    bool is_arguments_Valid() const;

    QList<QString> getDepTokens() const;
    void setDepTokens(const QList<QString> &dep_tokens);
    bool is_dep_tokens_Set() const;
    bool is_dep_tokens_Valid() const;

    qint32 getFinished() const;
    void setFinished(const qint32 &finished);
    bool is_finished_Set() const;
    bool is_finished_Valid() const;

    QDateTime getFinishedAt() const;
    void setFinishedAt(const QDateTime &finished_at);
    bool is_finished_at_Set() const;
    bool is_finished_at_Valid() const;

    bool isIsDataProvided() const;
    void setIsDataProvided(const bool &is_data_provided);
    bool is_is_data_provided_Set() const;
    bool is_is_data_provided_Valid() const;

    bool isIsTemporaryModel() const;
    void setIsTemporaryModel(const bool &is_temporary_model);
    bool is_is_temporary_model_Set() const;
    bool is_is_temporary_model_Valid() const;

    qint32 getJobCount() const;
    void setJobCount(const qint32 &job_count);
    bool is_job_count_Set() const;
    bool is_job_count_Valid() const;

    OAIModel_job_labels getLabels() const;
    void setLabels(const OAIModel_job_labels &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getModel() const;
    void setModel(const QString &model);
    bool is_model_Set() const;
    bool is_model_Valid() const;

    QString getRNamespace() const;
    void setRNamespace(const QString &r_namespace);
    bool is_r_namespace_Set() const;
    bool is_r_namespace_Valid() const;

    bool isResultExists() const;
    void setResultExists(const bool &result_exists);
    bool is_result_exists_Set() const;
    bool is_result_exists_Valid() const;

    qint32 getStatus() const;
    void setStatus(const qint32 &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QDateTime getSubmittedAt() const;
    void setSubmittedAt(const QDateTime &submitted_at);
    bool is_submitted_at_Set() const;
    bool is_submitted_at_Valid() const;

    qint32 getSuccessfullyFinished() const;
    void setSuccessfullyFinished(const qint32 &successfully_finished);
    bool is_successfully_finished_Set() const;
    bool is_successfully_finished_Valid() const;

    QString getTag() const;
    void setTag(const QString &tag);
    bool is_tag_Set() const;
    bool is_tag_Valid() const;

    QString getToken() const;
    void setToken(const QString &token);
    bool is_token_Set() const;
    bool is_token_Valid() const;

    OAIModel_user getUser() const;
    void setUser(const OAIModel_user &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_access_groups;
    bool m_access_groups_isSet;
    bool m_access_groups_isValid;

    QList<QString> m_arguments;
    bool m_arguments_isSet;
    bool m_arguments_isValid;

    QList<QString> m_dep_tokens;
    bool m_dep_tokens_isSet;
    bool m_dep_tokens_isValid;

    qint32 m_finished;
    bool m_finished_isSet;
    bool m_finished_isValid;

    QDateTime m_finished_at;
    bool m_finished_at_isSet;
    bool m_finished_at_isValid;

    bool m_is_data_provided;
    bool m_is_data_provided_isSet;
    bool m_is_data_provided_isValid;

    bool m_is_temporary_model;
    bool m_is_temporary_model_isSet;
    bool m_is_temporary_model_isValid;

    qint32 m_job_count;
    bool m_job_count_isSet;
    bool m_job_count_isValid;

    OAIModel_job_labels m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_model;
    bool m_model_isSet;
    bool m_model_isValid;

    QString m_r_namespace;
    bool m_r_namespace_isSet;
    bool m_r_namespace_isValid;

    bool m_result_exists;
    bool m_result_exists_isSet;
    bool m_result_exists_isValid;

    qint32 m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QDateTime m_submitted_at;
    bool m_submitted_at_isSet;
    bool m_submitted_at_isValid;

    qint32 m_successfully_finished;
    bool m_successfully_finished_isSet;
    bool m_successfully_finished_isValid;

    QString m_tag;
    bool m_tag_isSet;
    bool m_tag_isValid;

    QString m_token;
    bool m_token_isSet;
    bool m_token_isValid;

    OAIModel_user m_user;
    bool m_user_isSet;
    bool m_user_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHypercube)

#endif // OAIHypercube_H
