/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModel_usage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModel_usage::OAIModel_usage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModel_usage::OAIModel_usage() {
    this->initializeModel();
}

OAIModel_usage::~OAIModel_usage() {}

void OAIModel_usage::initializeModel() {

    m_hypercube_job_usage_isSet = false;
    m_hypercube_job_usage_isValid = false;

    m_job_usage_isSet = false;
    m_job_usage_isValid = false;

    m_pool_usage_isSet = false;
    m_pool_usage_isValid = false;
}

void OAIModel_usage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModel_usage::fromJsonObject(QJsonObject json) {

    m_hypercube_job_usage_isValid = ::OpenAPI::fromJsonValue(hypercube_job_usage, json[QString("hypercube_job_usage")]);
    m_hypercube_job_usage_isSet = !json[QString("hypercube_job_usage")].isNull() && m_hypercube_job_usage_isValid;

    m_job_usage_isValid = ::OpenAPI::fromJsonValue(job_usage, json[QString("job_usage")]);
    m_job_usage_isSet = !json[QString("job_usage")].isNull() && m_job_usage_isValid;

    m_pool_usage_isValid = ::OpenAPI::fromJsonValue(pool_usage, json[QString("pool_usage")]);
    m_pool_usage_isSet = !json[QString("pool_usage")].isNull() && m_pool_usage_isValid;
}

QString OAIModel_usage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModel_usage::asJsonObject() const {
    QJsonObject obj;
    if (hypercube_job_usage.size() > 0) {
        obj.insert(QString("hypercube_job_usage"), ::OpenAPI::toJsonValue(hypercube_job_usage));
    }
    if (job_usage.size() > 0) {
        obj.insert(QString("job_usage"), ::OpenAPI::toJsonValue(job_usage));
    }
    if (pool_usage.size() > 0) {
        obj.insert(QString("pool_usage"), ::OpenAPI::toJsonValue(pool_usage));
    }
    return obj;
}

QList<OAIModel_hypercube_usage> OAIModel_usage::getHypercubeJobUsage() const {
    return hypercube_job_usage;
}
void OAIModel_usage::setHypercubeJobUsage(const QList<OAIModel_hypercube_usage> &hypercube_job_usage) {
    this->hypercube_job_usage = hypercube_job_usage;
    this->m_hypercube_job_usage_isSet = true;
}

bool OAIModel_usage::is_hypercube_job_usage_Set() const{
    return m_hypercube_job_usage_isSet;
}

bool OAIModel_usage::is_hypercube_job_usage_Valid() const{
    return m_hypercube_job_usage_isValid;
}

QList<OAIModel_job_usage> OAIModel_usage::getJobUsage() const {
    return job_usage;
}
void OAIModel_usage::setJobUsage(const QList<OAIModel_job_usage> &job_usage) {
    this->job_usage = job_usage;
    this->m_job_usage_isSet = true;
}

bool OAIModel_usage::is_job_usage_Set() const{
    return m_job_usage_isSet;
}

bool OAIModel_usage::is_job_usage_Valid() const{
    return m_job_usage_isValid;
}

QList<OAIModel_pool_usage> OAIModel_usage::getPoolUsage() const {
    return pool_usage;
}
void OAIModel_usage::setPoolUsage(const QList<OAIModel_pool_usage> &pool_usage) {
    this->pool_usage = pool_usage;
    this->m_pool_usage_isSet = true;
}

bool OAIModel_usage::is_pool_usage_Set() const{
    return m_pool_usage_isSet;
}

bool OAIModel_usage::is_pool_usage_Valid() const{
    return m_pool_usage_isValid;
}

bool OAIModel_usage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (hypercube_job_usage.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (job_usage.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (pool_usage.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModel_usage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
