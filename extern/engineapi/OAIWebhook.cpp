/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 23.06.02
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhook::OAIWebhook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhook::OAIWebhook() {
    this->initializeModel();
}

OAIWebhook::~OAIWebhook() {}

void OAIWebhook::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_insecure_ssl_isSet = false;
    m_insecure_ssl_isValid = false;

    m_parameterized_events_isSet = false;
    m_parameterized_events_isValid = false;

    m_recursive_isSet = false;
    m_recursive_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIWebhook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhook::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(content_type, json[QString("content_type")]);
    m_content_type_isSet = !json[QString("content_type")].isNull() && m_content_type_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_insecure_ssl_isValid = ::OpenAPI::fromJsonValue(insecure_ssl, json[QString("insecure_ssl")]);
    m_insecure_ssl_isSet = !json[QString("insecure_ssl")].isNull() && m_insecure_ssl_isValid;

    m_parameterized_events_isValid = ::OpenAPI::fromJsonValue(parameterized_events, json[QString("parameterized_events")]);
    m_parameterized_events_isSet = !json[QString("parameterized_events")].isNull() && m_parameterized_events_isValid;

    m_recursive_isValid = ::OpenAPI::fromJsonValue(recursive, json[QString("recursive")]);
    m_recursive_isSet = !json[QString("recursive")].isNull() && m_recursive_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIWebhook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhook::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("content_type"), ::OpenAPI::toJsonValue(content_type));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(created_at));
    }
    if (events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(events));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_insecure_ssl_isSet) {
        obj.insert(QString("insecure_ssl"), ::OpenAPI::toJsonValue(insecure_ssl));
    }
    if (parameterized_events.size() > 0) {
        obj.insert(QString("parameterized_events"), ::OpenAPI::toJsonValue(parameterized_events));
    }
    if (m_recursive_isSet) {
        obj.insert(QString("recursive"), ::OpenAPI::toJsonValue(recursive));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(url));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(username));
    }
    return obj;
}

QString OAIWebhook::getContentType() const {
    return content_type;
}
void OAIWebhook::setContentType(const QString &content_type) {
    this->content_type = content_type;
    this->m_content_type_isSet = true;
}

bool OAIWebhook::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIWebhook::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QDateTime OAIWebhook::getCreatedAt() const {
    return created_at;
}
void OAIWebhook::setCreatedAt(const QDateTime &created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

bool OAIWebhook::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIWebhook::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<QString> OAIWebhook::getEvents() const {
    return events;
}
void OAIWebhook::setEvents(const QList<QString> &events) {
    this->events = events;
    this->m_events_isSet = true;
}

bool OAIWebhook::is_events_Set() const{
    return m_events_isSet;
}

bool OAIWebhook::is_events_Valid() const{
    return m_events_isValid;
}

qint32 OAIWebhook::getId() const {
    return id;
}
void OAIWebhook::setId(const qint32 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIWebhook::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWebhook::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIWebhook::isInsecureSsl() const {
    return insecure_ssl;
}
void OAIWebhook::setInsecureSsl(const bool &insecure_ssl) {
    this->insecure_ssl = insecure_ssl;
    this->m_insecure_ssl_isSet = true;
}

bool OAIWebhook::is_insecure_ssl_Set() const{
    return m_insecure_ssl_isSet;
}

bool OAIWebhook::is_insecure_ssl_Valid() const{
    return m_insecure_ssl_isValid;
}

QList<OAIWebhook_parameterized_event> OAIWebhook::getParameterizedEvents() const {
    return parameterized_events;
}
void OAIWebhook::setParameterizedEvents(const QList<OAIWebhook_parameterized_event> &parameterized_events) {
    this->parameterized_events = parameterized_events;
    this->m_parameterized_events_isSet = true;
}

bool OAIWebhook::is_parameterized_events_Set() const{
    return m_parameterized_events_isSet;
}

bool OAIWebhook::is_parameterized_events_Valid() const{
    return m_parameterized_events_isValid;
}

bool OAIWebhook::isRecursive() const {
    return recursive;
}
void OAIWebhook::setRecursive(const bool &recursive) {
    this->recursive = recursive;
    this->m_recursive_isSet = true;
}

bool OAIWebhook::is_recursive_Set() const{
    return m_recursive_isSet;
}

bool OAIWebhook::is_recursive_Valid() const{
    return m_recursive_isValid;
}

QString OAIWebhook::getUrl() const {
    return url;
}
void OAIWebhook::setUrl(const QString &url) {
    this->url = url;
    this->m_url_isSet = true;
}

bool OAIWebhook::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWebhook::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIWebhook::getUsername() const {
    return username;
}
void OAIWebhook::setUsername(const QString &username) {
    this->username = username;
    this->m_username_isSet = true;
}

bool OAIWebhook::is_username_Set() const{
    return m_username_isSet;
}

bool OAIWebhook::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIWebhook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insecure_ssl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (parameterized_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recursive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
