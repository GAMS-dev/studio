/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 25.04.23
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPassword_policy.h
 *
 * 
 */

#ifndef OAIPassword_policy_H
#define OAIPassword_policy_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPassword_policy : public OAIObject {
public:
    OAIPassword_policy();
    OAIPassword_policy(QString json);
    ~OAIPassword_policy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getMinPasswordLength() const;
    void setMinPasswordLength(const qint32 &min_password_length);
    bool is_min_password_length_Set() const;
    bool is_min_password_length_Valid() const;

    bool isMustIncludeLowercase() const;
    void setMustIncludeLowercase(const bool &must_include_lowercase);
    bool is_must_include_lowercase_Set() const;
    bool is_must_include_lowercase_Valid() const;

    bool isMustIncludeNumber() const;
    void setMustIncludeNumber(const bool &must_include_number);
    bool is_must_include_number_Set() const;
    bool is_must_include_number_Valid() const;

    bool isMustIncludeSpecialChar() const;
    void setMustIncludeSpecialChar(const bool &must_include_special_char);
    bool is_must_include_special_char_Set() const;
    bool is_must_include_special_char_Valid() const;

    bool isMustIncludeUppercase() const;
    void setMustIncludeUppercase(const bool &must_include_uppercase);
    bool is_must_include_uppercase_Set() const;
    bool is_must_include_uppercase_Valid() const;

    bool isNotInPopularPasswords() const;
    void setNotInPopularPasswords(const bool &not_in_popular_passwords);
    bool is_not_in_popular_passwords_Set() const;
    bool is_not_in_popular_passwords_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_min_password_length;
    bool m_min_password_length_isSet;
    bool m_min_password_length_isValid;

    bool m_must_include_lowercase;
    bool m_must_include_lowercase_isSet;
    bool m_must_include_lowercase_isValid;

    bool m_must_include_number;
    bool m_must_include_number_isSet;
    bool m_must_include_number_isValid;

    bool m_must_include_special_char;
    bool m_must_include_special_char_isSet;
    bool m_must_include_special_char_isValid;

    bool m_must_include_uppercase;
    bool m_must_include_uppercase_isSet;
    bool m_must_include_uppercase_isValid;

    bool m_not_in_popular_passwords;
    bool m_not_in_popular_passwords_isSet;
    bool m_not_in_popular_passwords_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPassword_policy)

#endif // OAIPassword_policy_H
