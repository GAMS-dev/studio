/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_group_member.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_group_member::OAIUser_group_member(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_group_member::OAIUser_group_member() {
    this->initializeModel();
}

OAIUser_group_member::~OAIUser_group_member() {}

void OAIUser_group_member::initializeModel() {

    m_added_at_isSet = false;
    m_added_at_isValid = false;

    m_added_by_isSet = false;
    m_added_by_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIUser_group_member::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_group_member::fromJsonObject(QJsonObject json) {

    m_added_at_isValid = ::OpenAPI::fromJsonValue(added_at, json[QString("added_at")]);
    m_added_at_isSet = !json[QString("added_at")].isNull() && m_added_at_isValid;

    m_added_by_isValid = ::OpenAPI::fromJsonValue(added_by, json[QString("added_by")]);
    m_added_by_isSet = !json[QString("added_by")].isNull() && m_added_by_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIUser_group_member::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_group_member::asJsonObject() const {
    QJsonObject obj;
    if (m_added_at_isSet) {
        obj.insert(QString("added_at"), ::OpenAPI::toJsonValue(added_at));
    }
    if (added_by.isSet()) {
        obj.insert(QString("added_by"), ::OpenAPI::toJsonValue(added_by));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(username));
    }
    return obj;
}

QDateTime OAIUser_group_member::getAddedAt() const {
    return added_at;
}
void OAIUser_group_member::setAddedAt(const QDateTime &added_at) {
    this->added_at = added_at;
    this->m_added_at_isSet = true;
}

bool OAIUser_group_member::is_added_at_Set() const{
    return m_added_at_isSet;
}

bool OAIUser_group_member::is_added_at_Valid() const{
    return m_added_at_isValid;
}

OAIModel_user OAIUser_group_member::getAddedBy() const {
    return added_by;
}
void OAIUser_group_member::setAddedBy(const OAIModel_user &added_by) {
    this->added_by = added_by;
    this->m_added_by_isSet = true;
}

bool OAIUser_group_member::is_added_by_Set() const{
    return m_added_by_isSet;
}

bool OAIUser_group_member::is_added_by_Valid() const{
    return m_added_by_isValid;
}

QString OAIUser_group_member::getUsername() const {
    return username;
}
void OAIUser_group_member::setUsername(const QString &username) {
    this->username = username;
    this->m_username_isSet = true;
}

bool OAIUser_group_member::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUser_group_member::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIUser_group_member::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (added_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_group_member::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
