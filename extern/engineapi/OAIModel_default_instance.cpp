/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 23.06.02
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModel_default_instance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModel_default_instance::OAIModel_default_instance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModel_default_instance::OAIModel_default_instance() {
    this->initializeModel();
}

OAIModel_default_instance::~OAIModel_default_instance() {}

void OAIModel_default_instance::initializeModel() {

    m_label_isSet = false;
    m_label_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;
}

void OAIModel_default_instance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModel_default_instance::fromJsonObject(QJsonObject json) {

    m_label_isValid = ::OpenAPI::fromJsonValue(label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;
}

QString OAIModel_default_instance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModel_default_instance::asJsonObject() const {
    QJsonObject obj;
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(label));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(resource_type));
    }
    return obj;
}

QString OAIModel_default_instance::getLabel() const {
    return label;
}
void OAIModel_default_instance::setLabel(const QString &label) {
    this->label = label;
    this->m_label_isSet = true;
}

bool OAIModel_default_instance::is_label_Set() const{
    return m_label_isSet;
}

bool OAIModel_default_instance::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIModel_default_instance::getResourceType() const {
    return resource_type;
}
void OAIModel_default_instance::setResourceType(const QString &resource_type) {
    this->resource_type = resource_type;
    this->m_resource_type_isSet = true;
}

bool OAIModel_default_instance::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIModel_default_instance::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

bool OAIModel_default_instance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModel_default_instance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
