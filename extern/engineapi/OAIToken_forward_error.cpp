/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 25.04.23
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIToken_forward_error.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIToken_forward_error::OAIToken_forward_error(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIToken_forward_error::OAIToken_forward_error() {
    this->initializeModel();
}

OAIToken_forward_error::~OAIToken_forward_error() {}

void OAIToken_forward_error::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;
}

void OAIToken_forward_error::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIToken_forward_error::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;
}

QString OAIToken_forward_error::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIToken_forward_error::asJsonObject() const {
    QJsonObject obj;
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    return obj;
}

QString OAIToken_forward_error::getError() const {
    return m_error;
}
void OAIToken_forward_error::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIToken_forward_error::is_error_Set() const{
    return m_error_isSet;
}

bool OAIToken_forward_error::is_error_Valid() const{
    return m_error_isValid;
}

bool OAIToken_forward_error::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIToken_forward_error::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
