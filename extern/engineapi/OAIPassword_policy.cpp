/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 25.04.23
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPassword_policy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPassword_policy::OAIPassword_policy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPassword_policy::OAIPassword_policy() {
    this->initializeModel();
}

OAIPassword_policy::~OAIPassword_policy() {}

void OAIPassword_policy::initializeModel() {

    m_min_password_length_isSet = false;
    m_min_password_length_isValid = false;

    m_must_include_lowercase_isSet = false;
    m_must_include_lowercase_isValid = false;

    m_must_include_number_isSet = false;
    m_must_include_number_isValid = false;

    m_must_include_special_char_isSet = false;
    m_must_include_special_char_isValid = false;

    m_must_include_uppercase_isSet = false;
    m_must_include_uppercase_isValid = false;

    m_not_in_popular_passwords_isSet = false;
    m_not_in_popular_passwords_isValid = false;
}

void OAIPassword_policy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPassword_policy::fromJsonObject(QJsonObject json) {

    m_min_password_length_isValid = ::OpenAPI::fromJsonValue(m_min_password_length, json[QString("min_password_length")]);
    m_min_password_length_isSet = !json[QString("min_password_length")].isNull() && m_min_password_length_isValid;

    m_must_include_lowercase_isValid = ::OpenAPI::fromJsonValue(m_must_include_lowercase, json[QString("must_include_lowercase")]);
    m_must_include_lowercase_isSet = !json[QString("must_include_lowercase")].isNull() && m_must_include_lowercase_isValid;

    m_must_include_number_isValid = ::OpenAPI::fromJsonValue(m_must_include_number, json[QString("must_include_number")]);
    m_must_include_number_isSet = !json[QString("must_include_number")].isNull() && m_must_include_number_isValid;

    m_must_include_special_char_isValid = ::OpenAPI::fromJsonValue(m_must_include_special_char, json[QString("must_include_special_char")]);
    m_must_include_special_char_isSet = !json[QString("must_include_special_char")].isNull() && m_must_include_special_char_isValid;

    m_must_include_uppercase_isValid = ::OpenAPI::fromJsonValue(m_must_include_uppercase, json[QString("must_include_uppercase")]);
    m_must_include_uppercase_isSet = !json[QString("must_include_uppercase")].isNull() && m_must_include_uppercase_isValid;

    m_not_in_popular_passwords_isValid = ::OpenAPI::fromJsonValue(m_not_in_popular_passwords, json[QString("not_in_popular_passwords")]);
    m_not_in_popular_passwords_isSet = !json[QString("not_in_popular_passwords")].isNull() && m_not_in_popular_passwords_isValid;
}

QString OAIPassword_policy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPassword_policy::asJsonObject() const {
    QJsonObject obj;
    if (m_min_password_length_isSet) {
        obj.insert(QString("min_password_length"), ::OpenAPI::toJsonValue(m_min_password_length));
    }
    if (m_must_include_lowercase_isSet) {
        obj.insert(QString("must_include_lowercase"), ::OpenAPI::toJsonValue(m_must_include_lowercase));
    }
    if (m_must_include_number_isSet) {
        obj.insert(QString("must_include_number"), ::OpenAPI::toJsonValue(m_must_include_number));
    }
    if (m_must_include_special_char_isSet) {
        obj.insert(QString("must_include_special_char"), ::OpenAPI::toJsonValue(m_must_include_special_char));
    }
    if (m_must_include_uppercase_isSet) {
        obj.insert(QString("must_include_uppercase"), ::OpenAPI::toJsonValue(m_must_include_uppercase));
    }
    if (m_not_in_popular_passwords_isSet) {
        obj.insert(QString("not_in_popular_passwords"), ::OpenAPI::toJsonValue(m_not_in_popular_passwords));
    }
    return obj;
}

qint32 OAIPassword_policy::getMinPasswordLength() const {
    return m_min_password_length;
}
void OAIPassword_policy::setMinPasswordLength(const qint32 &min_password_length) {
    m_min_password_length = min_password_length;
    m_min_password_length_isSet = true;
}

bool OAIPassword_policy::is_min_password_length_Set() const{
    return m_min_password_length_isSet;
}

bool OAIPassword_policy::is_min_password_length_Valid() const{
    return m_min_password_length_isValid;
}

bool OAIPassword_policy::isMustIncludeLowercase() const {
    return m_must_include_lowercase;
}
void OAIPassword_policy::setMustIncludeLowercase(const bool &must_include_lowercase) {
    m_must_include_lowercase = must_include_lowercase;
    m_must_include_lowercase_isSet = true;
}

bool OAIPassword_policy::is_must_include_lowercase_Set() const{
    return m_must_include_lowercase_isSet;
}

bool OAIPassword_policy::is_must_include_lowercase_Valid() const{
    return m_must_include_lowercase_isValid;
}

bool OAIPassword_policy::isMustIncludeNumber() const {
    return m_must_include_number;
}
void OAIPassword_policy::setMustIncludeNumber(const bool &must_include_number) {
    m_must_include_number = must_include_number;
    m_must_include_number_isSet = true;
}

bool OAIPassword_policy::is_must_include_number_Set() const{
    return m_must_include_number_isSet;
}

bool OAIPassword_policy::is_must_include_number_Valid() const{
    return m_must_include_number_isValid;
}

bool OAIPassword_policy::isMustIncludeSpecialChar() const {
    return m_must_include_special_char;
}
void OAIPassword_policy::setMustIncludeSpecialChar(const bool &must_include_special_char) {
    m_must_include_special_char = must_include_special_char;
    m_must_include_special_char_isSet = true;
}

bool OAIPassword_policy::is_must_include_special_char_Set() const{
    return m_must_include_special_char_isSet;
}

bool OAIPassword_policy::is_must_include_special_char_Valid() const{
    return m_must_include_special_char_isValid;
}

bool OAIPassword_policy::isMustIncludeUppercase() const {
    return m_must_include_uppercase;
}
void OAIPassword_policy::setMustIncludeUppercase(const bool &must_include_uppercase) {
    m_must_include_uppercase = must_include_uppercase;
    m_must_include_uppercase_isSet = true;
}

bool OAIPassword_policy::is_must_include_uppercase_Set() const{
    return m_must_include_uppercase_isSet;
}

bool OAIPassword_policy::is_must_include_uppercase_Valid() const{
    return m_must_include_uppercase_isValid;
}

bool OAIPassword_policy::isNotInPopularPasswords() const {
    return m_not_in_popular_passwords;
}
void OAIPassword_policy::setNotInPopularPasswords(const bool &not_in_popular_passwords) {
    m_not_in_popular_passwords = not_in_popular_passwords;
    m_not_in_popular_passwords_isSet = true;
}

bool OAIPassword_policy::is_not_in_popular_passwords_Set() const{
    return m_not_in_popular_passwords_isSet;
}

bool OAIPassword_policy::is_not_in_popular_passwords_Valid() const{
    return m_not_in_popular_passwords_isValid;
}

bool OAIPassword_policy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_min_password_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_must_include_lowercase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_must_include_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_must_include_special_char_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_must_include_uppercase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_in_popular_passwords_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPassword_policy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
