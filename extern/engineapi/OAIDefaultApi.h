/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 23.06.02
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMessage.h"
#include "OAIModel_configuration.h"
#include "OAIModel_version.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    void getConfiguration();


    void getVersion();

    /**
    * @param[in]  webhook_access QString [optional]
    * @param[in]  instance_pool_access QString [optional]
    * @param[in]  text_entries_max_size qint32 [optional]
    * @param[in]  hostname QString [optional]
    */
    void updateConfiguration(const ::OpenAPI::OptionalParam<QString> &webhook_access = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &instance_pool_access = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &text_entries_max_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &hostname = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getConfigurationCallback(OAIHttpRequestWorker *worker);
    void getVersionCallback(OAIHttpRequestWorker *worker);
    void updateConfigurationCallback(OAIHttpRequestWorker *worker);

signals:

    void getConfigurationSignal(OAIModel_configuration summary);
    void getVersionSignal(OAIModel_version summary);
    void updateConfigurationSignal(OAIMessage summary);

    void getConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIModel_configuration summary);
    void getVersionSignalFull(OAIHttpRequestWorker *worker, OAIModel_version summary);
    void updateConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIMessage summary);

    void getConfigurationSignalE(OAIModel_configuration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionSignalE(OAIModel_version summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConfigurationSignalE(OAIMessage summary, QNetworkReply::NetworkError error_type, QString error_str);

    void getConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
