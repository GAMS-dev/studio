/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 23.02.18
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentity_provider_oauth2_scope.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentity_provider_oauth2_scope::OAIIdentity_provider_oauth2_scope(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentity_provider_oauth2_scope::OAIIdentity_provider_oauth2_scope() {
    this->initializeModel();
}

OAIIdentity_provider_oauth2_scope::~OAIIdentity_provider_oauth2_scope() {}

void OAIIdentity_provider_oauth2_scope::initializeModel() {

    m_request_scope_isSet = false;
    m_request_scope_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;
}

void OAIIdentity_provider_oauth2_scope::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentity_provider_oauth2_scope::fromJsonObject(QJsonObject json) {

    m_request_scope_isValid = ::OpenAPI::fromJsonValue(request_scope, json[QString("request_scope")]);
    m_request_scope_isSet = !json[QString("request_scope")].isNull() && m_request_scope_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;
}

QString OAIIdentity_provider_oauth2_scope::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentity_provider_oauth2_scope::asJsonObject() const {
    QJsonObject obj;
    if (m_request_scope_isSet) {
        obj.insert(QString("request_scope"), ::OpenAPI::toJsonValue(request_scope));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(scope));
    }
    return obj;
}

QString OAIIdentity_provider_oauth2_scope::getRequestScope() const {
    return request_scope;
}
void OAIIdentity_provider_oauth2_scope::setRequestScope(const QString &request_scope) {
    this->request_scope = request_scope;
    this->m_request_scope_isSet = true;
}

bool OAIIdentity_provider_oauth2_scope::is_request_scope_Set() const{
    return m_request_scope_isSet;
}

bool OAIIdentity_provider_oauth2_scope::is_request_scope_Valid() const{
    return m_request_scope_isValid;
}

QString OAIIdentity_provider_oauth2_scope::getScope() const {
    return scope;
}
void OAIIdentity_provider_oauth2_scope::setScope(const QString &scope) {
    this->scope = scope;
    this->m_scope_isSet = true;
}

bool OAIIdentity_provider_oauth2_scope::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIIdentity_provider_oauth2_scope::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIIdentity_provider_oauth2_scope::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_request_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentity_provider_oauth2_scope::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
