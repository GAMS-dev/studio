/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 23.02.18
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIModel_hypercube_usage.h
 *
 * 
 */

#ifndef OAIModel_hypercube_usage_H
#define OAIModel_hypercube_usage_H

#include <QJsonObject>

#include "OAIModel_hypercube_job.h"
#include "OAIModel_job_labels.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIModel_hypercube_usage : public OAIObject {
public:
    OAIModel_hypercube_usage();
    OAIModel_hypercube_usage(QString json);
    ~OAIModel_hypercube_usage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCompleted() const;
    void setCompleted(const qint32 &completed);
    bool is_completed_Set() const;
    bool is_completed_Valid() const;

    QDateTime getFinished() const;
    void setFinished(const QDateTime &finished);
    bool is_finished_Set() const;
    bool is_finished_Valid() const;

    qint32 getJobCount() const;
    void setJobCount(const qint32 &job_count);
    bool is_job_count_Set() const;
    bool is_job_count_Valid() const;

    QList<OAIModel_hypercube_job> getJobs() const;
    void setJobs(const QList<OAIModel_hypercube_job> &jobs);
    bool is_jobs_Set() const;
    bool is_jobs_Valid() const;

    OAIModel_job_labels getLabels() const;
    void setLabels(const OAIModel_job_labels &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getModel() const;
    void setModel(const QString &model);
    bool is_model_Set() const;
    bool is_model_Valid() const;

    QString getRNamespace() const;
    void setRNamespace(const QString &r_namespace);
    bool is_r_namespace_Set() const;
    bool is_r_namespace_Valid() const;

    qint32 getStatus() const;
    void setStatus(const qint32 &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QDateTime getSubmitted() const;
    void setSubmitted(const QDateTime &submitted);
    bool is_submitted_Set() const;
    bool is_submitted_Valid() const;

    QString getToken() const;
    void setToken(const QString &token);
    bool is_token_Set() const;
    bool is_token_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 completed;
    bool m_completed_isSet;
    bool m_completed_isValid;

    QDateTime finished;
    bool m_finished_isSet;
    bool m_finished_isValid;

    qint32 job_count;
    bool m_job_count_isSet;
    bool m_job_count_isValid;

    QList<OAIModel_hypercube_job> jobs;
    bool m_jobs_isSet;
    bool m_jobs_isValid;

    OAIModel_job_labels labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString model;
    bool m_model_isSet;
    bool m_model_isValid;

    QString r_namespace;
    bool m_r_namespace_isSet;
    bool m_r_namespace_isValid;

    qint32 status;
    bool m_status_isSet;
    bool m_status_isValid;

    QDateTime submitted;
    bool m_submitted_isSet;
    bool m_submitted_isValid;

    QString token;
    bool m_token_isSet;
    bool m_token_isValid;

    QString username;
    bool m_username_isSet;
    bool m_username_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIModel_hypercube_usage)

#endif // OAIModel_hypercube_usage_H
