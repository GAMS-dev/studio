/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 25.04.23
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModel_userinstancepool_info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModel_userinstancepool_info::OAIModel_userinstancepool_info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModel_userinstancepool_info::OAIModel_userinstancepool_info() {
    this->initializeModel();
}

OAIModel_userinstancepool_info::~OAIModel_userinstancepool_info() {}

void OAIModel_userinstancepool_info::initializeModel() {

    m_instance_pools_available_isSet = false;
    m_instance_pools_available_isValid = false;
}

void OAIModel_userinstancepool_info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModel_userinstancepool_info::fromJsonObject(QJsonObject json) {

    m_instance_pools_available_isValid = ::OpenAPI::fromJsonValue(m_instance_pools_available, json[QString("instance_pools_available")]);
    m_instance_pools_available_isSet = !json[QString("instance_pools_available")].isNull() && m_instance_pools_available_isValid;
}

QString OAIModel_userinstancepool_info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModel_userinstancepool_info::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_pools_available.size() > 0) {
        obj.insert(QString("instance_pools_available"), ::OpenAPI::toJsonValue(m_instance_pools_available));
    }
    return obj;
}

QList<OAIModel_instance_pool_info> OAIModel_userinstancepool_info::getInstancePoolsAvailable() const {
    return m_instance_pools_available;
}
void OAIModel_userinstancepool_info::setInstancePoolsAvailable(const QList<OAIModel_instance_pool_info> &instance_pools_available) {
    m_instance_pools_available = instance_pools_available;
    m_instance_pools_available_isSet = true;
}

bool OAIModel_userinstancepool_info::is_instance_pools_available_Set() const{
    return m_instance_pools_available_isSet;
}

bool OAIModel_userinstancepool_info::is_instance_pools_available_Valid() const{
    return m_instance_pools_available_isValid;
}

bool OAIModel_userinstancepool_info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_pools_available.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModel_userinstancepool_info::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
