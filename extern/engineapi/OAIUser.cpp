/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 25.04.23
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_identity_provider_isSet = false;
    m_identity_provider_isValid = false;

    m_identity_provider_user_subject_isSet = false;
    m_identity_provider_user_subject_isValid = false;

    m_invitation_time_isSet = false;
    m_invitation_time_isValid = false;

    m_inviter_name_isSet = false;
    m_inviter_name_isValid = false;

    m_old_username_isSet = false;
    m_old_username_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_identity_provider_isValid = ::OpenAPI::fromJsonValue(m_identity_provider, json[QString("identity_provider")]);
    m_identity_provider_isSet = !json[QString("identity_provider")].isNull() && m_identity_provider_isValid;

    m_identity_provider_user_subject_isValid = ::OpenAPI::fromJsonValue(m_identity_provider_user_subject, json[QString("identity_provider_user_subject")]);
    m_identity_provider_user_subject_isSet = !json[QString("identity_provider_user_subject")].isNull() && m_identity_provider_user_subject_isValid;

    m_invitation_time_isValid = ::OpenAPI::fromJsonValue(m_invitation_time, json[QString("invitation_time")]);
    m_invitation_time_isSet = !json[QString("invitation_time")].isNull() && m_invitation_time_isValid;

    m_inviter_name_isValid = ::OpenAPI::fromJsonValue(m_inviter_name, json[QString("inviter_name")]);
    m_inviter_name_isSet = !json[QString("inviter_name")].isNull() && m_inviter_name_isValid;

    m_old_username_isValid = ::OpenAPI::fromJsonValue(m_old_username, json[QString("old_username")]);
    m_old_username_isSet = !json[QString("old_username")].isNull() && m_old_username_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_identity_provider_isSet) {
        obj.insert(QString("identity_provider"), ::OpenAPI::toJsonValue(m_identity_provider));
    }
    if (m_identity_provider_user_subject_isSet) {
        obj.insert(QString("identity_provider_user_subject"), ::OpenAPI::toJsonValue(m_identity_provider_user_subject));
    }
    if (m_invitation_time_isSet) {
        obj.insert(QString("invitation_time"), ::OpenAPI::toJsonValue(m_invitation_time));
    }
    if (m_inviter_name_isSet) {
        obj.insert(QString("inviter_name"), ::OpenAPI::toJsonValue(m_inviter_name));
    }
    if (m_old_username_isSet) {
        obj.insert(QString("old_username"), ::OpenAPI::toJsonValue(m_old_username));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

bool OAIUser::isDeleted() const {
    return m_deleted;
}
void OAIUser::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIUser::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIUser::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIUser::getIdentityProvider() const {
    return m_identity_provider;
}
void OAIUser::setIdentityProvider(const QString &identity_provider) {
    m_identity_provider = identity_provider;
    m_identity_provider_isSet = true;
}

bool OAIUser::is_identity_provider_Set() const{
    return m_identity_provider_isSet;
}

bool OAIUser::is_identity_provider_Valid() const{
    return m_identity_provider_isValid;
}

QString OAIUser::getIdentityProviderUserSubject() const {
    return m_identity_provider_user_subject;
}
void OAIUser::setIdentityProviderUserSubject(const QString &identity_provider_user_subject) {
    m_identity_provider_user_subject = identity_provider_user_subject;
    m_identity_provider_user_subject_isSet = true;
}

bool OAIUser::is_identity_provider_user_subject_Set() const{
    return m_identity_provider_user_subject_isSet;
}

bool OAIUser::is_identity_provider_user_subject_Valid() const{
    return m_identity_provider_user_subject_isValid;
}

QDateTime OAIUser::getInvitationTime() const {
    return m_invitation_time;
}
void OAIUser::setInvitationTime(const QDateTime &invitation_time) {
    m_invitation_time = invitation_time;
    m_invitation_time_isSet = true;
}

bool OAIUser::is_invitation_time_Set() const{
    return m_invitation_time_isSet;
}

bool OAIUser::is_invitation_time_Valid() const{
    return m_invitation_time_isValid;
}

QString OAIUser::getInviterName() const {
    return m_inviter_name;
}
void OAIUser::setInviterName(const QString &inviter_name) {
    m_inviter_name = inviter_name;
    m_inviter_name_isSet = true;
}

bool OAIUser::is_inviter_name_Set() const{
    return m_inviter_name_isSet;
}

bool OAIUser::is_inviter_name_Valid() const{
    return m_inviter_name_isValid;
}

QString OAIUser::getOldUsername() const {
    return m_old_username;
}
void OAIUser::setOldUsername(const QString &old_username) {
    m_old_username = old_username;
    m_old_username_isSet = true;
}

bool OAIUser::is_old_username_Set() const{
    return m_old_username_isSet;
}

bool OAIUser::is_old_username_Valid() const{
    return m_old_username_isValid;
}

QList<QString> OAIUser::getRoles() const {
    return m_roles;
}
void OAIUser::setRoles(const QList<QString> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIUser::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIUser::is_roles_Valid() const{
    return m_roles_isValid;
}

QString OAIUser::getUsername() const {
    return m_username;
}
void OAIUser::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUser::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUser::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_provider_user_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invitation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inviter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
