/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 23.06.02
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModel_user.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModel_user::OAIModel_user(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModel_user::OAIModel_user() {
    this->initializeModel();
}

OAIModel_user::~OAIModel_user() {}

void OAIModel_user::initializeModel() {

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_old_username_isSet = false;
    m_old_username_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIModel_user::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModel_user::fromJsonObject(QJsonObject json) {

    m_deleted_isValid = ::OpenAPI::fromJsonValue(deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_old_username_isValid = ::OpenAPI::fromJsonValue(old_username, json[QString("old_username")]);
    m_old_username_isSet = !json[QString("old_username")].isNull() && m_old_username_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIModel_user::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModel_user::asJsonObject() const {
    QJsonObject obj;
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(deleted));
    }
    if (m_old_username_isSet) {
        obj.insert(QString("old_username"), ::OpenAPI::toJsonValue(old_username));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(username));
    }
    return obj;
}

bool OAIModel_user::isDeleted() const {
    return deleted;
}
void OAIModel_user::setDeleted(const bool &deleted) {
    this->deleted = deleted;
    this->m_deleted_isSet = true;
}

bool OAIModel_user::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIModel_user::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIModel_user::getOldUsername() const {
    return old_username;
}
void OAIModel_user::setOldUsername(const QString &old_username) {
    this->old_username = old_username;
    this->m_old_username_isSet = true;
}

bool OAIModel_user::is_old_username_Set() const{
    return m_old_username_isSet;
}

bool OAIModel_user::is_old_username_Valid() const{
    return m_old_username_isValid;
}

QString OAIModel_user::getUsername() const {
    return username;
}
void OAIModel_user::setUsername(const QString &username) {
    this->username = username;
    this->m_username_isSet = true;
}

bool OAIModel_user::is_username_Set() const{
    return m_username_isSet;
}

bool OAIModel_user::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIModel_user::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModel_user::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
