/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: 25.04.23
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInex.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInex::OAIInex(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInex::OAIInex() {
    this->initializeModel();
}

OAIInex::~OAIInex() {}

void OAIInex::initializeModel() {

    m_files_isSet = false;
    m_files_isValid = false;

    m_globbing_enabled_isSet = false;
    m_globbing_enabled_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIInex::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInex::fromJsonObject(QJsonObject json) {

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_globbing_enabled_isValid = ::OpenAPI::fromJsonValue(m_globbing_enabled, json[QString("globbing_enabled")]);
    m_globbing_enabled_isSet = !json[QString("globbing_enabled")].isNull() && m_globbing_enabled_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIInex::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInex::asJsonObject() const {
    QJsonObject obj;
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_globbing_enabled_isSet) {
        obj.insert(QString("globbing_enabled"), ::OpenAPI::toJsonValue(m_globbing_enabled));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAIInex::getFiles() const {
    return m_files;
}
void OAIInex::setFiles(const QList<QString> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIInex::is_files_Set() const{
    return m_files_isSet;
}

bool OAIInex::is_files_Valid() const{
    return m_files_isValid;
}

bool OAIInex::isGlobbingEnabled() const {
    return m_globbing_enabled;
}
void OAIInex::setGlobbingEnabled(const bool &globbing_enabled) {
    m_globbing_enabled = globbing_enabled;
    m_globbing_enabled_isSet = true;
}

bool OAIInex::is_globbing_enabled_Set() const{
    return m_globbing_enabled_isSet;
}

bool OAIInex::is_globbing_enabled_Valid() const{
    return m_globbing_enabled_isValid;
}

QString OAIInex::getType() const {
    return m_type;
}
void OAIInex::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInex::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInex::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIInex::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_globbing_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInex::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
