/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuota.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuota::OAIQuota(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuota::OAIQuota() {
    this->initializeModel();
}

OAIQuota::~OAIQuota() {}

void OAIQuota::initializeModel() {

    m_disk_quota_isSet = false;
    m_disk_quota_isValid = false;

    m_disk_used_isSet = false;
    m_disk_used_isValid = false;

    m_parallel_quota_isSet = false;
    m_parallel_quota_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_volume_quota_isSet = false;
    m_volume_quota_isValid = false;

    m_volume_used_isSet = false;
    m_volume_used_isValid = false;
}

void OAIQuota::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuota::fromJsonObject(QJsonObject json) {

    m_disk_quota_isValid = ::OpenAPI::fromJsonValue(disk_quota, json[QString("disk_quota")]);
    m_disk_quota_isSet = !json[QString("disk_quota")].isNull() && m_disk_quota_isValid;

    m_disk_used_isValid = ::OpenAPI::fromJsonValue(disk_used, json[QString("disk_used")]);
    m_disk_used_isSet = !json[QString("disk_used")].isNull() && m_disk_used_isValid;

    m_parallel_quota_isValid = ::OpenAPI::fromJsonValue(parallel_quota, json[QString("parallel_quota")]);
    m_parallel_quota_isSet = !json[QString("parallel_quota")].isNull() && m_parallel_quota_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_volume_quota_isValid = ::OpenAPI::fromJsonValue(volume_quota, json[QString("volume_quota")]);
    m_volume_quota_isSet = !json[QString("volume_quota")].isNull() && m_volume_quota_isValid;

    m_volume_used_isValid = ::OpenAPI::fromJsonValue(volume_used, json[QString("volume_used")]);
    m_volume_used_isSet = !json[QString("volume_used")].isNull() && m_volume_used_isValid;
}

QString OAIQuota::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuota::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_quota_isSet) {
        obj.insert(QString("disk_quota"), ::OpenAPI::toJsonValue(disk_quota));
    }
    if (m_disk_used_isSet) {
        obj.insert(QString("disk_used"), ::OpenAPI::toJsonValue(disk_used));
    }
    if (m_parallel_quota_isSet) {
        obj.insert(QString("parallel_quota"), ::OpenAPI::toJsonValue(parallel_quota));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(username));
    }
    if (m_volume_quota_isSet) {
        obj.insert(QString("volume_quota"), ::OpenAPI::toJsonValue(volume_quota));
    }
    if (m_volume_used_isSet) {
        obj.insert(QString("volume_used"), ::OpenAPI::toJsonValue(volume_used));
    }
    return obj;
}

qint32 OAIQuota::getDiskQuota() const {
    return disk_quota;
}
void OAIQuota::setDiskQuota(const qint32 &disk_quota) {
    this->disk_quota = disk_quota;
    this->m_disk_quota_isSet = true;
}

bool OAIQuota::is_disk_quota_Set() const{
    return m_disk_quota_isSet;
}

bool OAIQuota::is_disk_quota_Valid() const{
    return m_disk_quota_isValid;
}

qint32 OAIQuota::getDiskUsed() const {
    return disk_used;
}
void OAIQuota::setDiskUsed(const qint32 &disk_used) {
    this->disk_used = disk_used;
    this->m_disk_used_isSet = true;
}

bool OAIQuota::is_disk_used_Set() const{
    return m_disk_used_isSet;
}

bool OAIQuota::is_disk_used_Valid() const{
    return m_disk_used_isValid;
}

double OAIQuota::getParallelQuota() const {
    return parallel_quota;
}
void OAIQuota::setParallelQuota(const double &parallel_quota) {
    this->parallel_quota = parallel_quota;
    this->m_parallel_quota_isSet = true;
}

bool OAIQuota::is_parallel_quota_Set() const{
    return m_parallel_quota_isSet;
}

bool OAIQuota::is_parallel_quota_Valid() const{
    return m_parallel_quota_isValid;
}

QString OAIQuota::getUsername() const {
    return username;
}
void OAIQuota::setUsername(const QString &username) {
    this->username = username;
    this->m_username_isSet = true;
}

bool OAIQuota::is_username_Set() const{
    return m_username_isSet;
}

bool OAIQuota::is_username_Valid() const{
    return m_username_isValid;
}

double OAIQuota::getVolumeQuota() const {
    return volume_quota;
}
void OAIQuota::setVolumeQuota(const double &volume_quota) {
    this->volume_quota = volume_quota;
    this->m_volume_quota_isSet = true;
}

bool OAIQuota::is_volume_quota_Set() const{
    return m_volume_quota_isSet;
}

bool OAIQuota::is_volume_quota_Valid() const{
    return m_volume_quota_isValid;
}

double OAIQuota::getVolumeUsed() const {
    return volume_used;
}
void OAIQuota::setVolumeUsed(const double &volume_used) {
    this->volume_used = volume_used;
    this->m_volume_used_isSet = true;
}

bool OAIQuota::is_volume_used_Set() const{
    return m_volume_used_isSet;
}

bool OAIQuota::is_volume_used_Valid() const{
    return m_volume_used_isValid;
}

bool OAIQuota::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallel_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_used_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuota::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
