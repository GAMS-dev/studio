/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthApi_H
#define OAI_OAIAuthApi_H

#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"

#include "OAIMessage.h"
#include "OAIModel_auth_token.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>
#include <QVariant>

namespace OpenAPI {

class OAIAuthApi : public QObject {
    Q_OBJECT

public:
    OAIAuthApi(const int timeOut = 0);
    ~OAIAuthApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(QString style);
    QString getParamStyleSuffix(QString style);
    QString getParamStyleDelimiter(QString style, QString name, bool isExplode);

    /**
    * @param[in]  expires_in qint32 [optional]
    */
    void createJWTToken(const QVariant &expires_in = QVariant());

    /**
    * @param[in]  username QString [required]
    * @param[in]  password QString [required]
    * @param[in]  expires_in qint32 [optional]
    */
    void postW(const QString &username, const QString &password, const QVariant &expires_in = QVariant());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> defaultHeaders;
    bool isResponseCompressionEnabled;
    bool isRequestCompressionEnabled;

    void createJWTTokenCallback(OAIHttpRequestWorker *worker);
    void postWCallback(OAIHttpRequestWorker *worker);

signals:

    void createJWTTokenSignal(OAIModel_auth_token summary);
    void postWSignal(OAIModel_auth_token summary);

    void createJWTTokenSignalFull(OAIHttpRequestWorker *worker, OAIModel_auth_token summary);
    void postWSignalFull(OAIHttpRequestWorker *worker, OAIModel_auth_token summary);

    void createJWTTokenSignalE(OAIModel_auth_token summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postWSignalE(OAIModel_auth_token summary, QNetworkReply::NetworkError error_type, QString error_str);

    void createJWTTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postWSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal(); 
};

} // namespace OpenAPI
#endif
