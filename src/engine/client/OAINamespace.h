/**
 * GAMS Engine
 * With GAMS Engine you can register and solve GAMS models. It has a namespace management system, so you can restrict your users to certain models.
 *
 * The version of the OpenAPI document: latest
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINamespace.h
 *
 * 
 */

#ifndef OAINamespace_H
#define OAINamespace_H

#include <QJsonObject>

#include "OAIPerm_and_username.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINamespace : public OAIObject {
public:
    OAINamespace();
    OAINamespace(QString json);
    ~OAINamespace() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDiskQuota() const;
    void setDiskQuota(const qint32 &disk_quota);
    bool is_disk_quota_Set() const;
    bool is_disk_quota_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIPerm_and_username> getPermissions() const;
    void setPermissions(const QList<OAIPerm_and_username> &permissions);
    bool is_permissions_Set() const;
    bool is_permissions_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 disk_quota;
    bool m_disk_quota_isSet;
    bool m_disk_quota_isValid;

    QString name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIPerm_and_username> permissions;
    bool m_permissions_isSet;
    bool m_permissions_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINamespace)

#endif // OAINamespace_H
