def artifactVersion() {
    def data = readFile('version')
    def major = data.findAll($/(?m)^STUDIO_MAJOR_VERSION=(\d+)/$).first().split('=').last()
    def minor = data.findAll($/(?m)^STUDIO_MINOR_VERSION=(\d+)/$).first().split('=').last()
    def patch = data.findAll($/(?m)^STUDIO_PATCH_LEVEL=(\d+)/$).first().split('=').last()
    return major + "." + minor + "." + patch
}

def isDevelopmentArtifact() {
    return env.BRANCH_NAME != 'master'         &&
           !(env.BRANCH_NAME ==~ /.*-release/) &&
           !(env.BRANCH_NAME ==~ /.*-rc/)      &&
           !(env.TAG_NAME ==~ /v\d+\.\d+\.\d+.*/)
}

def QT_FOR_LINUX = "/opt/Qt/5.15.2/bin"
def QT_FOR_MACOS = "/Users/distrib/Qt/5.15.2/clang_64/bin"
def QT_FOR_WINDOWS = "C:\\Qt\\5.15.2\\msvc2019_64\\bin"

def GAMS_FOR_LINUX = "/opt/gams/gams35.2_linux_x64_64_sfx"
def GAMS_FOR_MACOS = "/Library/Frameworks/GAMS.framework/Versions/35/Resources"
def GAMS_FOR_WINDOWS = "C:\\GAMS\\35"

pipeline {
    agent none

    options {
        parallelsAlwaysFailFast()
        disableConcurrentBuilds()
    }

    stages {
        stage('Build') {
            parallel {
                stage ('linux') {
                    agent { label 'master' }
                    environment {
                        GAMS_CORE_PATH="${GAMS_FOR_LINUX}"
                        PATH="${QT_FOR_LINUX}:${GAMS_FOR_LINUX}:${PATH}"
                    }
                    steps {
                        step([$class: 'WsCleanup'])
                        echo "${PATH}"
                        checkout scm
                        sh '''
                            qmake gams-studio.pro CONFIG+=release && make -j3
                        '''
                    }
                    post {
                        always {
                            recordIssues aggregatingResults: true, enabledForFailure: true, tools: [gcc(reportEncoding: 'UTF-8')]
                            recordIssues enabledForFailure: true, tools: [taskScanner(ignoreCase: true, includePattern: '**/*.c, **/*.cpp, **/*.h, **/*.pro, **/*.pri', normalTags: 'TODO')]
                        }
                    }
                }
                stage ('windowsX64') {
                    agent { label 'windowsX64' }
                    environment {
                        GAMS_CORE_PATH="${GAMS_FOR_WINDOWS}"
                        PATH="${QT_FOR_WINDOWS};${GAMS_FOR_WINDOWS};${PATH}"
                    }
                    steps {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        bat '''
                            @echo off
                            echo Setting up environment for VS2019 usage...
                            cd "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\VC\\Auxiliary\\Build"
                            call vcvars64.bat
                            cd %WORKSPACE%
                            qmake gams-studio.pro "CONFIG+=release"
                            nmake
                        '''
                    }
                    post {
                        always {
                            recordIssues aggregatingResults: true, enabledForFailure: true, tools: [msBuild(id: 'windowsX64', name: 'MSBuild-x64', reportEncoding: 'UTF-8')]
                        }
                    }
                }
                stage ('macos') {
                    agent { label 'macos' }
                    environment {
                        GAMS_CORE_PATH="${GAMS_FOR_MACOS}"
                        PATH="${QT_FOR_MACOS}:${GAMS_FOR_MACOS}:${PATH}"
                    }
                    steps {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        sh '''
                            GAMS_DISTRIB_MAJOR=$(grep ^GAMS_DISTRIB_MAJOR version | cut -f2 -d"=")
                            sed -i "" "s/com.gams.studio/com.gams.${GAMS_DISTRIB_MAJOR}.studio/g" platform/macos/info.plist
                        '''
                        script {
                            def versionData = artifactVersion()
                            sh """
                                sed -i "" "s/x.y.z/${versionData}/g" platform/macos/info.plist
                            """
                        }
                        sh 'qmake gams-studio.pro CONFIG+=release && make -j3'
                    }
                    post {
                        always {
                            recordIssues aggregatingResults: true, enabledForFailure: true, tools: [clang(reportEncoding: 'UTF-8')]
                        }
                    }
                }
            }
        }
        stage('Test') {
            parallel {
                stage ('linux') {
                    agent { label 'master' }
                    environment {
                        PATH="${QT_FOR_LINUX}:${GAMS_FOR_LINUX}:${PATH}"
                    }
                    steps {
                        sh '''
                            set +e
                            mkdir reports
                            cd tests/bin
                            for f in *; do
                                xvfb-run -a ./$f -xunitxml -o $WORKSPACE/reports/$f.xml
                            done
                        '''
                    }
                    post {
                        always {
                            junit allowEmptyResults: true, testResults: 'reports/*.xml'
                        }
                    }
                }
                stage ('windowsX64') {
                    agent { label 'windowsX64' }
                    environment {
                        PATH="${QT_FOR_WINDOWS};${GAMS_FOR_WINDOWS};${PATH}"
                    }
                    steps {
                        bat '''
                            mkdir reports
                            cd tests/bin
                            for %%f in (*) do %%f -xunitxml -o %WORKSPACE%/reports/%%f.xml
                        '''
                    }
                    post {
                        always {
                            junit allowEmptyResults: true, testResults: 'reports/*.xml'
                        }
                    }
                }
                stage ('macos') {
                    agent { label 'macos' }
                    environment {
                        PATH="${QT_FOR_MACOS}:${GAMS_FOR_MACOS}:${PATH}"
                    }
                    steps {
                        sh '''
                            set +e
                            mkdir reports
                            cd tests/bin
                            for f in *; do
                                echo "$f"
                                #./$f -xunitxml -o $WORKSPACE/reports/$f.xml
                            done
                        '''
                    }
                    post {
                        always {
                            junit allowEmptyResults: true, testResults: 'reports/*.xml'
                        }
                    }
                }
            }
        }
        stage('Pack') {
            parallel {
                stage ('linux') {
                    agent { label 'master' }
                    environment {
                        PATH="${QT_FOR_LINUX}:${PATH}"
                    }
                    steps {
                        sh '''
                            # create folder structure
                            mkdir -p appdir/usr/bin
                            mkdir -p appdir/usr/share/pixmaps
                            mkdir -p appdir/usr/resources

                            # collect files
                            cp src/bin/studio appdir/usr/bin/
                            cp platform/linux/gamsstudio.desktop appdir/usr/share/studio.desktop
                            cp -r icons/* appdir/usr/share/pixmaps
                            cp CHANGELOG appdir/usr/resources/Changelog

                            STUDIO_MAJOR_VERSION=$(grep ^STUDIO_MAJOR_VERSION version | cut -f2 -d"=")
                            STUDIO_MINOR_VERSION=$(grep ^STUDIO_MINOR_VERSION version | cut -f2 -d"=")
                            STUDIO_PATCH_LEVEL=$(grep ^STUDIO_PATCH_LEVEL version | cut -f2 -d"=")
                            export VERSION=$STUDIO_MAJOR_VERSION.$STUDIO_MINOR_VERSION.$STUDIO_PATCH_LEVEL

                            # Chromium crash workaround
                            mkdir -p appdir/usr/lib
                            cp /usr/lib/x86_64-linux-gnu/nss/* ./appdir/usr/lib

                            linuxdeployqt-continuous-x86_64.AppImage appdir/usr/share/studio.desktop -appimage -bundle-non-qt-libs -no-translations -extra-plugins=iconengines
                        '''
                    }
                }
                stage ('windowsX64') {
                    agent { label 'windowsX64' }
                    environment {
                        PATH="${QT_FOR_WINDOWS};${PATH}"
                    }
                    steps {
                        bat '''
                            windeployqt --release --compiler-runtime --force src\\bin\\studio.exe

                            copy CHANGELOG "src\\bin\\resources\\Changelog"
                            copy "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\VC\\Redist\\MSVC\\14.24.28127\\x64\\Microsoft.VC142.CRT\\*" "src\\bin"
                            copy "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\VC\\Redist\\MSVC\\14.24.28127\\vc_redist.x64.exe" "src\\bin"
                        '''
                        fileOperations([folderCreateOperation('tmp/studio'), folderCopyOperation(destinationFolderPath: 'tmp/studio', sourceFolderPath: 'src/bin')])
                        script {
                            if (!isDevelopmentArtifact() || env.BRANCH_NAME == 'develop') {
                                withCredentials([certificate(aliasVariable: '', credentialsId: '302df092-b329-47b9-8f7a-605da075126d', keystoreVariable: 'WIN_CERT_FILE', passwordVariable: 'WIN_CERT_PASSWD')]) {
                                    bat '''
                                        echo Setting up environment for VS2019 usage...
                                        cd "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\VC\\Auxiliary\\Build"
                                        call vcvars64.bat
                                        cd %WORKSPACE%\\tmp\\studio
                                        signtool sign /v /f %WIN_CERT_FILE% /p %WIN_CERT_PASSWD% /t http://timestamp.comodoca.com studio.exe
                                    '''
                                }
                                bat '''
                                    echo Setting up environment for VS2019 usage...
                                    cd "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\VC\\Auxiliary\\Build"
                                    call vcvars64.bat
                                    cd %WORKSPACE%\\tmp\\studio
                                    signtool verify /v /pa studio.exe
                                '''
                            }
                        }
                    }
                }
                stage ('macos') {
                    agent { label 'macos' }
                    environment {
                        PATH="${QT_FOR_MACOS}:${PATH}"
                    }
                    steps {
                        fileOperations([folderRenameOperation(destination: 'src/bin/GAMS Studio.app', source: 'src/bin/studio.app')])
                        withCredentials([string(credentialsId: '2e590f95-5e30-4101-93be-31a1b7402da4', variable: 'MACOS_KEYCHAIN_PASSWD')]) {
                            sh '''
                                cd src/bin
                                security unlock-keychain -p ${MACOS_KEYCHAIN_PASSWD}

                                macdeployqt "GAMS Studio.app" -always-overwrite
                                cp ../../CHANGELOG "GAMS Studio.app/Contents/Resources/Changelog"
                                codesign --sign ${CODESIGN_IDENTITY} --options runtime --force --deep --timestamp --entitlements ../../platform/macos/studio.entitlements.plist "GAMS Studio.app"

                                USE_QWEBENGINE=$(grep "QWEBENGINE=" ${WORKSPACE}/gamsdependency.pri | cut -f2 -d"=")
                                echo "Use QWEBENGINE: $USE_QWEBENGINE"
                                if [ "$USE_QWEBENGINE" = "true" ]; then
                                    echo "Signing QWEBENGINE..."
                                    codesign --sign ${CODESIGN_IDENTITY} --options runtime --force --timestamp --entitlements ../../platform/macos/webengine.entitlements.plist "GAMS Studio.app/Contents/Frameworks/QtWebEngineCore.framework/Helpers/QtWebEngineProcess.app/Contents/MacOS/QtWebEngineProcess"
                                fi

                                hdiutil create -volname "GAMS Studio" -srcfolder "GAMS Studio.app" -ov -fs HFS+ -format UDZO "GAMS Studio.dmg"
                            '''
                            sh '''
                                codesign --verify --verbose "src/bin/GAMS Studio.app"
                            '''
                        }
                        sh '''
                            mv "src/bin/GAMS Studio.dmg" studio.dmg
                        '''
                        script {
                            def versionData = artifactVersion()
                            if (isDevelopmentArtifact()) {
                                sh "mv studio.dmg ${env.BRANCH_NAME}-studio-${versionData}-x86_64.dmg"
                            } else {
                                sh "mv studio.dmg GAMS_Studio-${versionData}-x86_64.dmg"
                            }
                        }
                    }
                }
            }
        }
        stage('Notarize') {
            agent { label 'macos' }
            when {
                expression { return !isDevelopmentArtifact() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: '4568bda5-894f-4fa1-b9c5-a8d42f6e61ac', passwordVariable: 'APPLE_ID_PASS', usernameVariable: 'APPLE_ID_USER')]) {
                    sh '''
                        DMG_NAME=$(find *.dmg)

                        xcrun altool --notarize-app -f $DMG_NAME --primary-bundle-id com.gams.studio    \
                                     -u ${APPLE_ID_USER} -p ${APPLE_ID_PASS} &> upload.log || true

                        REQUEST_UUID=$(cat upload.log | grep RequestUUID | cut -f2 -d"=" | tr -d '[:space:]')
                        if [ -z "$REQUEST_UUID" ];
                        then
                            REQUEST_UUID=$(cat upload.log | grep -e "\\*\\*\\* Error: ERROR ITMS-90732: .*" |   \
                                           sed -nE "s/^[[:digit:]]+.*ID is ([0-9a-z-]+)\\".*/\\1/p")
                        fi

                        while true; do
                            sleep 60s

                            xcrun altool --notarization-info $REQUEST_UUID --output-format xml  \
                                         -u ${APPLE_ID_USER} -p ${APPLE_ID_PASS} &> report.xml

                            NOTARIZATION_STATUS=$(/usr/libexec/PlistBuddy -c "Print :notarization-info:Status" report.xml)
                            if [ $? -eq 0 ]; then
                                if [ "$NOTARIZATION_STATUS" != "in progress" ]; then
                                    echo "Notarization ended; result: $NOTARIZATION_STATUS"
                                    break
                                fi
                                echo "Notarization still in progress. Waiting 60s to check again."
                            else
                                echo "Could not determine notarization status; giving up. Server response:"
                                cat report.xml
                                exit 1
                            fi
                        done

                        # Staple the notarization ticket to the app bundle
                        if [ "$NOTARIZATION_STATUS" == "success" ]; then
                            echo "Notarization successful; stapling ticket to app bundle"
                            xcrun stapler staple $DMG_NAME
                        else
                            echo "Notarization failed."
                            exit 1
                        fi
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'upload.log, report.xml', fingerprint: true
                }
            }
        }
        stage('Archive') {
            parallel {
                stage('linux') {
                    agent { label 'master'}
                    steps {
                        script {
                            def versionData = artifactVersion()
                            if (isDevelopmentArtifact()) {
                                sh "mv GAMS_Studio-*.AppImage ${env.BRANCH_NAME}-studio-${versionData}-x86_64.AppImage"
                                archiveArtifacts artifacts: '*studio*.AppImage', fingerprint: true
                            } else {
                                archiveArtifacts artifacts: '*.AppImage', fingerprint: true
                            }
                        }
                    }
                }
                stage('windowsX64') {
                    agent { label 'windowsX64' }
                    steps {
                        script {
                            def versionData = artifactVersion()
                            if (isDevelopmentArtifact()) {
                                zip zipFile: "${env.BRANCH_NAME}-studio-${versionData}-x86_64.zip", archive: true, dir: 'tmp'
                            } else {
                                zip zipFile: "GAMS_Studio-${versionData}-x86_64.zip", archive: true, dir: 'tmp'
                            }
                        }
                    }
                }
                stage('macos') {
                    agent { label 'macos' }
                    steps {
                        archiveArtifacts artifacts: '*.dmg', fingerprint: true
                    }
                }
            }
        }
        stage('Deploy to GitHub') {
            agent { label 'master' }
            when {
                expression { return currentBuild.currentResult == "SUCCESS" }
                tag pattern: "v\\d+\\.\\d+\\.\\d+.*", comparator: "REGEXP"
            }
            steps {
                sh '''
                    mkdir -p artifacts
                '''
                copyArtifacts filter: '*.AppImage, *.dmg, *.zip', fingerprintArtifacts: true, projectName: '${JOB_NAME}', selector: specific('${BUILD_NUMBER}'), target: 'artifacts'
                withCredentials([string(credentialsId: '18e8f0e0-f27a-4358-b70f-04acec1e9617', variable: 'GITHUB_TOKEN')]) {
                    sh '''#!/bin/bash -xe
                        ## get version information for artifact, tag name and description
                        GAMS_DISTRIB_MAJOR_VERSION=$(grep ^GAMS_DISTRIB_MAJOR version | cut -f2 -d"=")
                        GAMS_DISTRIB_MINOR_VERSION=$(grep ^GAMS_DISTRIB_MINOR version | cut -f2 -d"=")
                        export GAMS_DISTRIB_VERSION=$GAMS_DISTRIB_MAJOR_VERSION.$GAMS_DISTRIB_MINOR_VERSION

                        CHANGELOG=""

                        foundFirst="false"
                        while IFS="" read -r line
                        do
                            if [[ $line =~ ^Version.* ]] && [[ $foundFirst == "true" ]]; then
                                break
                            elif [[ $line =~ ^Version.* ]]; then
                                CHANGELOG+=$line$'\n'
                                foundFirst="true"
                            else
                                CHANGELOG+=$line$'\n'
                            fi
                        done < CHANGELOG

                        ## GitHub parameters
                        export GITHUB_TOKEN=${GITHUB_TOKEN}
                        GITHUB_RELEASE_ADDRESS="https://github.com/GAMS-dev/studio/releases/tag/${TAG_NAME}"
                        GITHUB_ORGA=GAMS-dev
                        GITHUB_REPO=studio

                        ## delete old release if needed
                        RELEASE_DELETED=0
                        github-release delete --user $GITHUB_ORGA --repo $GITHUB_REPO --tag ${TAG_NAME} && RELEASE_DELETED=0 || RELEASE_DELETED=1
                        if [[ $RELEASE_DELETED -eq 0 ]]; then
                          echo "Release deleted"
                        else
                          echo "No release to delete"
                        fi

                        ## create a GitHub release
                        if [[ ${TAG_NAME} =~ ^v[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then
                            github-release release --user $GITHUB_ORGA --repo $GITHUB_REPO --tag ${TAG_NAME} \
--description "${CHANGELOG}

This new version of GAMS Studio requires GAMS ${GAMS_DISTRIB_VERSION} or higher. To download GAMS, please visit https://www.gams.com/latest/. To learn more about GAMS Studio, please visit https://www.gams.com/latest/docs/T_STUDIO.html"
                        elif [[ ${TAG_NAME} =~ ^v[0-9]+\\.[0-9]+\\.[0-9]+-rc$ ]]; then
                            github-release release --user $GITHUB_ORGA --repo $GITHUB_REPO --tag ${TAG_NAME} --pre-release \
--description "${CHANGELOG}

This new version of GAMS Studio requires GAMS ${GAMS_DISTRIB_VERSION} or higher. To download GAMS, please visit https://www.gams.com/latest/. To learn more about GAMS Studio, please visit https://www.gams.com/latest/docs/T_STUDIO.html"
                        fi

                        if [[ ${TAG_NAME} =~ ^v[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then
                            ## upload artifacts to GitHub
                            cd artifacts
                            ls -al
                            parallel github-release upload -R --user $GITHUB_ORGA --repo $GITHUB_REPO --tag ${TAG_NAME} --name {} --file {} ::: *.*
                        fi
                    '''
                }
            }
        }
        stage('Deploy to CloudFront') {
            agent { label 'master' }
            when {
                expression { return currentBuild.currentResult == "SUCCESS" }
                tag pattern: "v\\d+\\.\\d+\\.\\d+.*", comparator: "REGEXP"
            }
            steps {
                withCredentials([string(credentialsId: '53f1d92b-76a0-4484-8aaa-f3ce3bfba010', variable: 'SVN_URL'), string(credentialsId: 'bcd47003-0790-442d-ba1f-5538b4b5482c', variable: 'S3_URL'), string(credentialsId: '3ca54edd-0357-407f-84bf-317fa1b4c20d', variable: 'S3_ACCESS_KEY'), string(credentialsId: 'f4bd9039-889c-401b-b0c6-455b73147c7c', variable: 'S3_SECRET_KEY'), usernamePassword(credentialsId: '6d541d7f-9fe0-48e2-a6c2-625bccf47a90', passwordVariable: 'SVN_PASSWD', usernameVariable: 'SVN_USER')]) {
                    sh '''#!/bin/bash -xe
                        ## get Studio version information for artifact and tag name
                        STUDIO_MAJOR_VERSION=$(grep ^STUDIO_MAJOR_VERSION version | cut -f2 -d"=")
                        STUDIO_MINOR_VERSION=$(grep ^STUDIO_MINOR_VERSION version | cut -f2 -d"=")
                        STUDIO_PATCH_LEVEL=$(grep ^STUDIO_PATCH_LEVEL version | cut -f2 -d"=")

                        ## change to artifact location
                        cd artifacts

                        ## folder name which matches the current tag, like v0.10.2 or v0.11.0-rc
                        FOLDER_NAME="${TAG_NAME}"

                        ## create GAMS Studio version directory
                        mkdir -p $FOLDER_NAME

                        ## move artifacts to correct location
                        mv *.dmg *.AppImage *.zip $FOLDER_NAME

                        ## URL to S3 studio
                        URL=${S3_URL}/studio/

                        ## S3 upload to gams.com
                        s3cmd sync --no-check-certificate --acl-public ./ $URL --access_key=${S3_ACCESS_KEY} --secret_key=${S3_SECRET_KEY}

                        ## S3 content listing
                        s3cmd ls --no-check-certificate -r $URL --access_key=${S3_ACCESS_KEY} --secret_key=${S3_SECRET_KEY}

                        ## Update gams.com for final releases
                        if [[ ${TAG_NAME} =~ ^v[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then
                            ## go to WORKSPACE for svn gams.com/studio.txt update
                            cd ${WORKSPACE}

                            ## prepare GAMS Studio version line
                            DATE=$(date +"%y%m%d")
                            LINE="[$STUDIO_MAJOR_VERSION$STUDIO_MINOR_VERSION$STUDIO_PATCH_LEVEL.$STUDIO_MAJOR_VERSION.$STUDIO_MINOR_VERSION.$STUDIO_PATCH_LEVEL,$DATE]"

                            ## get Studio svn release list folder
                            svn checkout --username ${SVN_USER} --password ${SVN_PASSWD} ${SVN_URL} release

                            ## update studio.txt without duplicates
                            if grep -Fxq $LINE release/studio.txt
                            then
                              echo "This version $LINE is already available in studio.txt"
                            else
                              printf "$LINE\\n$(cat release/studio.txt)" > release/studio.txt
                            fi

                            ## upload changed Studio release list
                            cd release
                            svn commit --username ${SVN_USER} --password ${SVN_PASSWD} -m "Jenkins GAMS Studio version update."
                        fi
                    '''
                }
            }
        }
    }
}
