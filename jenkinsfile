pipeline {
    agent any
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', daysToKeepStr: '2'))
    }

    triggers {
        cron('0 23 * * *')
    }

    stages {
        stage('Build') {
            steps {
                parallel linux: {
                    node('master') {
                        checkout scm
                        sh 'qmake src/ide.pro && make -j3'
                    }
                },
                windowsX86: {
                    node('windowsX86') {
                        checkout scm
                        bat '''
                            echo 'Setting up environment for Qt usage...'
                            set PATH=C:\\Qt\\5.9.1\\mingw53_32\\bin;C:\\Qt\\Tools\\mingw530_32\\bin;%PATH%
                            cd src
                            qmake ide.pro
                            make
                        '''
                    }
                },
                windowsX64: {
                    node('windowsX64') {
                        checkout scm
                        bat '''
                            echo 'Setting up environment for Qt usage...'
                            set PATH=C:\\Qt\\5.9.1\\msvc2015_64\\bin;%PATH%
                            call "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat" amd64
                            set > C:\\jenkins\\x64\\workspace\\build.properties
                        '''
                    }
                },
                macos: {
                    node('macos') {
                        checkout scm
                        sh 'qmake src/ide.pro && make -j3'
                    }
                }
            }
        }
        stage('Test') {
            steps {
                parallel linux: {
                    node('master') {
                        sh '''
                            echo 'TODO Test on linux'
                        '''
                    }
                },
                windowsX86: {
                    node('windowsX86') {
                        bat '''
                            echo 'TODO Test on windowsX86'
                        '''
                    }
                },
                windowsX64: {
                    node('windowsX64') {
                        bat '''
                            echo 'TODO Test on windowsX64'
                        '''
                    }
                },
                macos: {
                    node('macos') {
                        sh '''
                            echo 'TODO Test on macos'
                        '''
                    }
                }
            }
        }
        stage('Pack') {
            steps {
                parallel linux: {
                    node('master') {
                        sh 'wget -c "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"'
                        sh '''
                            #git archive develop --format=zip -o gams-ide-develop.zip 
                            #git archive develop | gzip > gams-ide-develop.tar.gz
                            
                            # collect files
                            #cp bin/ide appdir/usr/bin/
                            #cp res/gamsstudio.desktop appdir/
                            #cp src/icons/* appdir/
                            
                            #linuxdeployqt-continuous-x86_64.AppImage appdir/usr/bin/ide -appimage -bundle-non-qt-libs
                        '''
                        //archiveArtifacts artifacts: 'gams-ide-develop.*, GAMS_Studio*', fingerprint: true
                    }
                },
                windowsX86: {
                    node('windowsX86') {
                        bat '''
                            echo 'Setting up environment for Qt usage...'
                            set PATH=C:\\Qt\\5.9.1\\mingw53_32\\bin;C:\\Qt\\Tools\\mingw530_32\\bin;"C:\\Program Files\\7-Zip";%PATH%
                            cd src\\bin
                            windeployqt --release --compiler-runtime --force ide.exe
                            del *.zip
                            7z a -r ide-x86.zip *
                        '''
                        archiveArtifacts artifacts: '**/ide-x86.zip', fingerprint: true
                    }
                },
                windowsX64: {
                    node('windowsX64') {
                        bat '''
                            echo 'Setting up environment for Qt usage...'
                            set PATH=C:\\Qt\\5.9.1\\msvc2015_64\\bin;"C:\\Program Files\\7-Zip";%PATH%
                        '''
                        //archiveArtifacts artifacts: '**/ide-x86.zip', fingerprint: true
                    }
                },
                macos: {
                    node('macos') {
                        sh '''
                            cd bin
                            macdeployqt ide.app -dmg -always-overwrite
                        '''
                        archiveArtifacts artifacts: '**/*.dmg', fingerprint: true
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                parallel linux: {
                    node('master') {
                        sh '''
                            echo 'TODO Deploy linux'
                        '''
                    }
                },
                windowsX86: {
                    node('windowsX86') {
                        bat '''
                            echo 'TODO Deploy windowsX86'
                        '''
                    }
                },
                windowsX64: {
                    node('windowsX86') {
                        bat '''
                            echo 'TODO Deploy windowsx64'
                        '''
                    }
                },
                macos: {
                    node('macos') {
                        sh '''
                            echo 'TODO Deploy macos'
                        '''
                    }
                }
            }
        }
    }
}
