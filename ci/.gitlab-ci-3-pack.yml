pack-deg:
  stage: pack
  tags: [macos]
  variables:
    qtpath: /Users/gitlab/Qt/${QT_VERSION}/macos/bin
  needs: [build-deg]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $PF_WEI_DEBUG == "0"
  script:
    - WORKSPACE=$(pwd)
    - PATH="${qtpath}:${PATH}"
    # get version information
    - |+
      STUDIO_MAJOR=$(grep "^STUDIO_MAJOR_VERSION=" version | cut -f2 -d"=")
      STUDIO_MINOR=$(grep "^STUDIO_MINOR_VERSION=" version | cut -f2 -d"=")
      STUDIO_PATCH=$(grep "^STUDIO_PATCH_LEVEL=" version | cut -f2 -d"=")
      export VERSION=$STUDIO_MAJOR.$STUDIO_MINOR.$STUDIO_PATCH
    # create directory, sign and create dmg
    - cd build/src/bin
    - mv studio.app "GAMS Studio.app"
    - macdeployqt "GAMS Studio.app" -always-overwrite
    - sed -i -e "s/x.y.z/$VERSION/g" "GAMS Studio.app/Contents/Info.plist"
    - cp ${WORKSPACE}/CHANGELOG "GAMS Studio.app/Contents/Resources/Changelog"
    - mkdir -p "GAMS Studio.app/Contents/SharedSupport/doc/fonts/"
    - cp ../../../fonts/*-License.txt "GAMS Studio.app/Contents/SharedSupport/doc/fonts/"
    - codesign --sign ${GAMS_CODESIGN_IDENTITY} --options runtime --force --deep --timestamp --entitlements ${WORKSPACE}/platform/macos/studio.entitlements.plist "GAMS Studio.app"
    - USE_QWEBENGINE=$(grep "QWEBENGINE=" ${WORKSPACE}/gamsdependency.pri | cut -f2 -d"=")
    - |+
      if [ "$USE_QWEBENGINE" = "true" ]; then
          echo "Signing QWEBENGINE..."
          codesign --sign ${GAMS_CODESIGN_IDENTITY} --options runtime --force --timestamp --entitlements ${WORKSPACE}/platform/macos/webengine.entitlements.plist "GAMS Studio.app/Contents/Frameworks/QtWebEngineCore.framework/Helpers/QtWebEngineProcess.app/Contents/MacOS/QtWebEngineProcess"
      fi
      hdiutil create -volname "GAMS Studio" -srcfolder "GAMS Studio.app" -ov -fs HFS+ -format UDZO "GAMS Studio.dmg"
    # verify signature
    - codesign --verify --verbose "GAMS Studio.app"
    # rename the AppImage... for MR artifact exposure
    - DMG_NAME=GAMS_Studio-deg-x86_64.dmg
    - mv "GAMS Studio.dmg" ${WORKSPACE}/${DMG_NAME}
    - cd ${WORKSPACE}
    # leave pipeline if it is not a Release, Release Tag or RC build
    - |+
      if [[ ! ${CI_COMMIT_REF_NAME} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] && [[ ! ${CI_COMMIT_REF_NAME} =~ .*-release$ ]] && [[ ! ${CI_COMMIT_REF_NAME} =~ .*-rc$ ]]; then
        echo "Notarization skipped!" > upload.log
        echo "Notarization skipped!" > report.xml
        cat upload.log
        cat report.xml
        exit 0;
      fi
    # notarize dmg
    - |+
      if xcrun notarytool submit $DMG_NAME --team-id ${GAMS_CODESIGN_IDENTITY} --apple-id ${GAMS_APPLEID_USER} --password ${GAMS_APPLEID_PASSWORD} --wait --timeout 30m
      then
        echo "Notarization successful"
      else
        echo "Notarization failed"
        exit 1
      fi
    - |+
      if xcrun stapler staple $DMG_NAME
      then
        echo "Stapled ticket to app bundle"
      else
        echo "Stapling failed"
        exit 1
      fi
  artifacts:
    name: "GAMS_Studio-deg-x86_64"
    paths: ['GAMS_Studio-deg-x86_64.dmg']
    expose_as: 'GAMS_Studio-deg-x86_64'
    expire_in: 1 days

pack-dac:
  stage: pack
  tags: [macos-arm64]
  variables:
    qtpath: /Users/gitlab/Qt/${QT_VERSION}/macos/bin
  needs: [build-dac]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $PF_WEI_DEBUG == "0"
  script:
    - WORKSPACE=$(pwd)
    - PATH="${qtpath}:${PATH}"
    # get version information
    - |+
      STUDIO_MAJOR=$(grep "^STUDIO_MAJOR_VERSION=" version | cut -f2 -d"=")
      STUDIO_MINOR=$(grep "^STUDIO_MINOR_VERSION=" version | cut -f2 -d"=")
      STUDIO_PATCH=$(grep "^STUDIO_PATCH_LEVEL=" version | cut -f2 -d"=")
      export VERSION=$STUDIO_MAJOR.$STUDIO_MINOR.$STUDIO_PATCH
    # create directory, sign and create dmg
    - cd build/src/bin
    - mv studio.app "GAMS Studio.app"
    - macdeployqt "GAMS Studio.app" -always-overwrite
    - sed -i -e "s/x.y.z/$VERSION/g" "GAMS Studio.app/Contents/Info.plist"
    - cp ${WORKSPACE}/CHANGELOG "GAMS Studio.app/Contents/Resources/Changelog"
    - mkdir -p "GAMS Studio.app/Contents/SharedSupport/doc/fonts/"
    - cp ../../../fonts/*-License.txt "GAMS Studio.app/Contents/SharedSupport/doc/fonts/"
    - codesign --sign ${GAMS_CODESIGN_IDENTITY} --options runtime --force --deep --timestamp --entitlements ${WORKSPACE}/platform/macos/studio.entitlements.plist "GAMS Studio.app"
    - USE_QWEBENGINE=$(grep "QWEBENGINE=" ${WORKSPACE}/gamsdependency.pri | cut -f2 -d"=")
    - |+
      if [ "$USE_QWEBENGINE" = "true" ]; then
          echo "Signing QWEBENGINE..."
          codesign --sign ${GAMS_CODESIGN_IDENTITY} --options runtime --force --timestamp --entitlements ${WORKSPACE}/platform/macos/webengine.entitlements.plist "GAMS Studio.app/Contents/Frameworks/QtWebEngineCore.framework/Helpers/QtWebEngineProcess.app/Contents/MacOS/QtWebEngineProcess"
      fi
      hdiutil create -volname "GAMS Studio" -srcfolder "GAMS Studio.app" -ov -fs HFS+ -format UDZO "GAMS Studio.dmg"
    # verify signature
    - codesign --verify --verbose "GAMS Studio.app"
    # rename the AppImage... for MR artifact exposure
    - DMG_NAME=GAMS_Studio-dac-arm_64.dmg
    - mv "GAMS Studio.dmg" ${WORKSPACE}/${DMG_NAME}
    - cd ${WORKSPACE}
    # leave pipeline if it is not a Release, Release Tag or RC build
    - |+
      if [[ ! ${CI_COMMIT_REF_NAME} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] && [[ ! ${CI_COMMIT_REF_NAME} =~ .*-release$ ]] && [[ ! ${CI_COMMIT_REF_NAME} =~ .*-rc$ ]]; then
        echo "Notarization skipped!" > upload.log
        echo "Notarization skipped!" > report.xml
        cat upload.log
        cat report.xml
        exit 0;
      fi
    # notarize dmg
    - |+
      if xcrun notarytool submit $DMG_NAME --team-id ${GAMS_CODESIGN_IDENTITY} --apple-id ${GAMS_APPLEID_USER} --password ${GAMS_APPLEID_PASSWORD} --wait --timeout 30m
      then
        echo "Notarization successful"
      else
        echo "Notarization failed"
        exit 1
      fi
    - |+
      if xcrun stapler staple $DMG_NAME
      then
        echo "Stapled ticket to app bundle"
      else
        echo "Stapling failed"
        exit 1
      fi
  artifacts:
    name: "GAMS_Studio-dac-arm_64"
    paths: ['GAMS_Studio-dac-arm_64.dmg']
    expose_as: 'GAMS_Studio-dac-arm_64'
    expire_in: 1 days

pack-leg:
  stage: pack
  tags: [linux]
  image:
    name: $GAMS_CONTAINER_REGISTRY/qt-machines/leg/${QT_IMAGE_VERSION}:latest
    entrypoint: [""]   # prevent startup.sh
  needs: [build-leg]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $PF_WEI_DEBUG == "0"
  script:
  # create folder structure
  - mkdir -p appdir/usr/bin
  - mkdir -p appdir/usr/share/pixmaps
  - mkdir -p appdir/usr/resources
  - mkdir -p appdir/usr/share/doc/fonts
  # copy required files
  - cp build/src/bin/studio appdir/usr/bin/
  - cp platform/linux/gamsstudio.desktop appdir/usr/share/studio.desktop
  - cp -r icons/* appdir/usr/share/pixmaps
  - cp CHANGELOG appdir/usr/resources/Changelog
  # copy font licenses
  - cp fonts/*-License.txt appdir/usr/share/doc/fonts
  # get version information
  - |+
    STUDIO_MAJOR=$(grep "^STUDIO_MAJOR_VERSION=" version | cut -f2 -d"=")
    STUDIO_MINOR=$(grep "^STUDIO_MINOR_VERSION=" version | cut -f2 -d"=")
    STUDIO_PATCH=$(grep "^STUDIO_PATCH_LEVEL=" version | cut -f2 -d"=")
    export LINUXDEPLOY_OUTPUT_VERSION=$STUDIO_MAJOR.$STUDIO_MINOR.$STUDIO_PATCH
  # create appimage without libnss3.so and libnssutil3.so (currently these libs cause a crash)
  - linuxdeploy-x86_64.AppImage --appdir=appdir --plugin=qt --desktop-file=appdir/usr/share/studio.desktop
  - rm appdir/usr/lib/libnss3.so appdir/usr/lib/libnssutil3.so
  - cp /opt/Qt/${QT_VERSION}/resources/v8_context_snapshot.bin appdir/usr/resources
  - linuxdeploy-plugin-appimage-x86_64.AppImage --appdir=appdir
  # rename the AppImage... for MR artifact exposure
  - mv GAMS_Studio-${LINUXDEPLOY_OUTPUT_VERSION}-x86_64.AppImage GAMS_Studio-leg-x86_64.AppImage
  artifacts:
    name: "GAMS_Studio-leg-x86_64"
    paths: ['GAMS_Studio-leg-x86_64.AppImage']
    expose_as: 'GAMS_Studio-leg-x86_64'
    expire_in: 1 days

pack-wei:
  stage: pack
  tags: [windows]
  image:
    name: $GAMS_CONTAINER_REGISTRY/qt-machines/wei/builder-qt6.8.2-icu:latest
  needs: [build-wei]
  variables:
    vcinsdir: C:\Program Files\Microsoft Visual Studio\2022\Community\VC
    cmd_vcvars: C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $PF_WEI_DEBUG == "0"
  script:
    - $WORKSPACE = $([System.IO.Directory]::GetCurrentDirectory())
    - $env:VCINSTALLDIR = "$vcinsdir"
    - '& $cmd_vcvars'
    # setup and fill studio directory
    - mkdir studio
    - cp build/src/bin/* studio
    - cp "/Program Files/Microsoft Visual Studio/2022/Community/VC/Redist/MSVC/14.38.33135/x64/Microsoft.VC143.CRT/*" "studio"
    - cp "/Program Files/Microsoft Visual Studio/2022/Community/VC/Redist/MSVC/14.38.33135/vc_redist.x64.exe" "studio"
    - cp "C:\QT\Tools\OpenSSLv3\Win_x64\bin\libcrypto-3-x64.dll" "studio"
    - cp "C:\QT\Tools\OpenSSLv3\Win_x64\bin\libssl-3-x64.dll" "studio"
    - cd studio
    - mkdir -p support/doc/fonts
    - cp ../fonts/*-License.txt support/doc/fonts
    - windeployqt --release --compiler-runtime --force studio.exe
    - cp ../CHANGELOG "resources/Changelog"
    # sign and verify studio
    - |+
      try {
        $bytes = $([System.Convert]::FromBase64String($GAMS_COMODO_CERT))
        Set-Content comodo_cert.p12 -Value $bytes -Encoding Byte
        signtool sign /v /f comodo_cert.p12 /p $GAMS_COMODO_CERT_PASSWORD /t http://timestamp.comodoca.com studio.exe
        signtool verify /v /pa studio.exe
        rm comodo_cert.p12
      } catch {
        $_
      } finally {
        if (Test-Path -Path "comodo_cert.p12" -PathType Leaf) {
          rm comodo_cert.p12
        }
      }
    # zip studio directory... for MR artifact exposure
    - cd ..
    - Compress-Archive -Path studio -DestinationPath GAMS_Studio-wei-x86_64.zip
  artifacts:
    name: "GAMS_Studio-wei-x86_64"
    paths: ['GAMS_Studio-wei-x86_64.zip']
    expose_as: 'GAMS_Studio-wei-x86_64'
    expire_in: 1 days

pack-wei-debug:
  stage: pack
  tags: [windows]
  image:
    name: $GAMS_CONTAINER_REGISTRY/qt-machines/wei/${QT_IMAGE_VERSION}:latest
  needs: [build-wei-debug]
  variables:
    vcinsdir: C:\Program Files\Microsoft Visual Studio\2022\Community\VC
    cmd_vcvars: C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat
  rules:
    - if: $PF_WEI_DEBUG == "1"
  script:
    - $WORKSPACE = $([System.IO.Directory]::GetCurrentDirectory())
    - $env:VCINSTALLDIR = "$vcinsdir"
    - '& $cmd_vcvars'
    # setup and fill studio directory
    - mkdir studio
    - cp build-debug/src/bin/* studio
    - cp "/Program Files/Microsoft Visual Studio/2022/Community/VC/Redist/MSVC/14.38.33135/x64/Microsoft.VC143.CRT/*" "studio"
    - cp "/Program Files/Microsoft Visual Studio/2022/Community/VC/Redist/MSVC/14.38.33135/vc_redist.x64.exe" "studio"
    - cp "C:\QT\Tools\OpenSSLv3\Win_x64\bin\libcrypto-3-x64.*" "studio"
    - cp "C:\QT\Tools\OpenSSLv3\Win_x64\bin\libssl-3-x64.*" "studio"
    - cd studio
    - mkdir -p support/doc/fonts
    - cp ../fonts/*-License.txt support/doc/fonts
    - windeployqt --debug --compiler-runtime --pdb --force studio.exe
    - cp ../CHANGELOG "resources/Changelog"
    # sign and verify studio
    - |+
      try {
        $bytes = $([System.Convert]::FromBase64String($GAMS_COMODO_CERT))
        Set-Content comodo_cert.p12 -Value $bytes -Encoding Byte
        signtool sign /v /f comodo_cert.p12 /p $GAMS_COMODO_CERT_PASSWORD /t http://timestamp.comodoca.com studio.exe
        signtool verify /v /pa studio.exe
        rm comodo_cert.p12
      } catch {
        $_
      } finally {
        if (Test-Path -Path "comodo_cert.p12" -PathType Leaf) {
          rm comodo_cert.p12
        }
      }
    # zip studio directory... for MR artifact exposure
    - cd ..
    - C:\7zip\7z.exe a -tzip "GAMS_Studio-wei-debug-x86_64.zip" studio
  artifacts:
    name: "GAMS_Studio-wei-debug-x86_64"
    paths: ['GAMS_Studio-wei-debug-x86_64.zip']
    expose_as: 'GAMS_Studio-wei-debug-x86_64'
    expire_in: 1 days
